// Generated by psc version 0.6.1.1
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    var Unit = {
        create: function (value) {
            return value;
        }
    };
    function LT() {

    };
    LT.value = new LT();
    function GT() {

    };
    GT.value = new GT();
    function EQ() {

    };
    EQ.value = new EQ();
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Category(__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Eq($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    function Ord(__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    function Bits($dot$amp$dot, $dot$up$dot, $dot$bar$dot, complement, shl, shr, zshr) {
        this[".&."] = $dot$amp$dot;
        this[".^."] = $dot$up$dot;
        this[".|."] = $dot$bar$dot;
        this.complement = complement;
        this.shl = shl;
        this.shr = shr;
        this.zshr = zshr;
    };
    function BoolLike($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function cons(e) {  return function(l) {    return [e].concat(l);  };};
    function showStringImpl(s) {  return JSON.stringify(s);};
    function showNumberImpl(n) {  return n.toString();};
    function showArrayImpl(f) {  return function(xs) {    var ss = [];    for (var i = 0, l = xs.length; i < l; i++) {      ss[i] = f(xs[i]);    }    return '[' + ss.join(',') + ']';  };};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    function refEq(r1) {  return function(r2) {    return r1 === r2;  };};
    function refIneq(r1) {  return function(r2) {    return r1 !== r2;  };};
    function eqArrayImpl(f) {  return function(xs) {    return function(ys) {      if (xs.length !== ys.length) return false;      for (var i = 0; i < xs.length; i++) {        if (!f(xs[i])(ys[i])) return false;      }      return true;    };  };};
    function unsafeCompareImpl(lt) {  return function(eq) {    return function(gt) {      return function(x) {        return function(y) {          return x < y ? lt : x > y ? gt : eq;        };      };    };  };};
    function numShl(n1) {  return function(n2) {    return n1 << n2;  };};
    function numShr(n1) {  return function(n2) {    return n1 >> n2;  };};
    function numZshr(n1) {  return function(n2) {    return n1 >>> n2;  };};
    function numAnd(n1) {  return function(n2) {    return n1 & n2;  };};
    function numOr(n1) {  return function(n2) {    return n1 | n2;  };};
    function numXor(n1) {  return function(n2) {    return n1 ^ n2;  };};
    function numComplement(n) {  return ~n;};
    function boolAnd(b1) {  return function(b2) {    return b1 && b2;  };};
    function boolOr(b1) {  return function(b2) {    return b1 || b2;  };};
    function boolNot(b) {  return !b;};
    function concatString(s1) {  return function(s2) {    return s1 + s2;  };};
    var $bar$bar = function (dict) {
        return dict["||"];
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $less$hash$greater = function (__dict_Functor_1) {
        return function (fa) {
            return function (f) {
                return $less$dollar$greater(__dict_Functor_1)(f)(fa);
            };
        };
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    var $div = function (dict) {
        return dict["/"];
    };
    var $dot$bar$dot = function (dict) {
        return dict[".|."];
    };
    var $dot$up$dot = function (dict) {
        return dict[".^."];
    };
    var $dot$amp$dot = function (dict) {
        return dict[".&."];
    };
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = function (dict) {
        return dict["%"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var $hash = function (x) {
        return function (f) {
            return f(x);
        };
    };
    var zshr = function (dict) {
        return dict.zshr;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var shr = function (dict) {
        return dict.shr;
    };
    var showUnit = new Show(function (_30) {
        return "Unit {}";
    });
    var showString = new Show(showStringImpl);
    var showOrdering = new Show(function (_38) {
        if (_38 instanceof LT) {
            return "LT";
        };
        if (_38 instanceof GT) {
            return "GT";
        };
        if (_38 instanceof EQ) {
            return "EQ";
        };
        throw new Error("Failed pattern match");
    });
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_31) {
        if (_31) {
            return "true";
        };
        if (!_31) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var shl = function (dict) {
        return dict.shl;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupUnit = new Semigroup(function (_45) {
        return function (_46) {
            return {};
        };
    });
    var semigroupString = new Semigroup(concatString);
    var semigroupArr = function (__dict_Semigroup_4) {
        return new Semigroup(function (f) {
            return function (g) {
                return function (x) {
                    return $less$greater(__dict_Semigroup_4)(f(x))(g(x));
                };
            };
        });
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var otherwise = true;
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftM1 = function (__dict_Monad_6) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(a)(function (_0) {
                    return $$return(__dict_Monad_6)(f(_0));
                });
            };
        };
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqUnit = new Eq(function (_34) {
        return function (_35) {
            return false;
        };
    }, function (_32) {
        return function (_33) {
            return true;
        };
    });
    var ordUnit = new Ord(function () {
        return eqUnit;
    }, function (_39) {
        return function (_40) {
            return EQ.value;
        };
    });
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var eqBoolean = new Eq(refIneq, refEq);
    var ordBoolean = new Ord(function () {
        return eqBoolean;
    }, function (_41) {
        return function (_42) {
            if (!_41 && !_42) {
                return EQ.value;
            };
            if (!_41 && _42) {
                return LT.value;
            };
            if (_41 && _42) {
                return EQ.value;
            };
            if (_41 && !_42) {
                return GT.value;
            };
            throw new Error("Failed pattern match");
        };
    });
    var $$const = function (_26) {
        return function (_27) {
            return _26;
        };
    };
    var $$void = function (__dict_Functor_9) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_9)($$const(unit))(fa);
        };
    };
    var complement = function (dict) {
        return dict.complement;
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _381 = compare(__dict_Ord_11)(a1)(a2);
                if (_381 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _382 = compare(__dict_Ord_12)(a1)(a2);
                if (_382 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _383 = compare(__dict_Ord_13)(a1)(a2);
                if (_383 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $greater$eq = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _384 = compare(__dict_Ord_14)(a1)(a2);
                if (_384 instanceof LT) {
                    return false;
                };
                return true;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var eqArray = function (__dict_Eq_8) {
        return new Eq(function (xs) {
            return function (ys) {
                return not(boolLikeBoolean)($eq$eq(eqArray(__dict_Eq_8))(xs)(ys));
            };
        }, function (xs) {
            return function (ys) {
                return eqArrayImpl($eq$eq(__dict_Eq_8))(xs)(ys);
            };
        });
    };
    var ordArray = function (__dict_Ord_10) {
        return new Ord(function () {
            return eqArray(__dict_Ord_10["__superclass_Prelude.Eq_0"]());
        }, function (_43) {
            return function (_44) {
                if (_43.length === 0 && _44.length === 0) {
                    return EQ.value;
                };
                if (_43.length === 0) {
                    return LT.value;
                };
                if (_44.length === 0) {
                    return GT.value;
                };
                if (_43.length >= 1) {
                    var _391 = _43.slice(1);
                    if (_44.length >= 1) {
                        var _389 = _44.slice(1);
                        var _387 = compare(__dict_Ord_10)(_43[0])(_44[0]);
                        if (_387 instanceof EQ) {
                            return compare(ordArray(__dict_Ord_10))(_391)(_389);
                        };
                        return _387;
                    };
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var eqOrdering = new Eq(function (x) {
        return function (y) {
            return not(boolLikeBoolean)($eq$eq(eqOrdering)(x)(y));
        };
    }, function (_36) {
        return function (_37) {
            if (_36 instanceof LT && _37 instanceof LT) {
                return true;
            };
            if (_36 instanceof GT && _37 instanceof GT) {
                return true;
            };
            if (_36 instanceof EQ && _37 instanceof EQ) {
                return true;
            };
            return false;
        };
    });
    var bitsNumber = new Bits(numAnd, numXor, numOr, numComplement, numShl, numShr, numZshr);
    var asTypeOf = function (_28) {
        return function (_29) {
            return _28;
        };
    };
    var applyArr = new Apply(function (f) {
        return function (g) {
            return function (x) {
                return f(x)(g(x));
            };
        };
    }, function () {
        return functorArr;
    });
    var bindArr = new Bind(function (m) {
        return function (f) {
            return function (x) {
                return f(m(x))(x);
            };
        };
    }, function () {
        return applyArr;
    });
    var applicativeArr = new Applicative(function () {
        return applyArr;
    }, $$const);
    var monadArr = new Monad(function () {
        return applicativeArr;
    }, function () {
        return bindArr;
    });
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "#": $hash, 
        "$": $dollar, 
        "%": $percent, 
        "&&": $amp$amp, 
        "*": $times, 
        "+": $plus, 
        "++": $plus$plus, 
        "-": $minus, 
        ".&.": $dot$amp$dot, 
        ".^.": $dot$up$dot, 
        ".|.": $dot$bar$dot, 
        "/": $div, 
        "/=": $div$eq, 
        ":": $colon, 
        "<": $less, 
        "<#>": $less$hash$greater, 
        "<$>": $less$dollar$greater, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<=": $less$eq, 
        "<>": $less$greater, 
        "==": $eq$eq, 
        ">": $greater, 
        ">=": $greater$eq, 
        ">>=": $greater$greater$eq, 
        ">>>": $greater$greater$greater, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Bits: Bits, 
        BoolLike: BoolLike, 
        Category: Category, 
        EQ: EQ, 
        Eq: Eq, 
        Functor: Functor, 
        GT: GT, 
        LT: LT, 
        Monad: Monad, 
        Num: Num, 
        Ord: Ord, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        Unit: Unit, 
        ap: ap, 
        applicativeArr: applicativeArr, 
        applyArr: applyArr, 
        asTypeOf: asTypeOf, 
        bindArr: bindArr, 
        bitsNumber: bitsNumber, 
        boolLikeBoolean: boolLikeBoolean, 
        categoryArr: categoryArr, 
        compare: compare, 
        complement: complement, 
        cons: cons, 
        "const": $$const, 
        eqArray: eqArray, 
        eqBoolean: eqBoolean, 
        eqNumber: eqNumber, 
        eqOrdering: eqOrdering, 
        eqString: eqString, 
        eqUnit: eqUnit, 
        flip: flip, 
        functorArr: functorArr, 
        id: id, 
        liftA1: liftA1, 
        liftM1: liftM1, 
        monadArr: monadArr, 
        negate: negate, 
        not: not, 
        numNumber: numNumber, 
        ordArray: ordArray, 
        ordBoolean: ordBoolean, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        ordUnit: ordUnit, 
        otherwise: otherwise, 
        pure: pure, 
        refEq: refEq, 
        refIneq: refIneq, 
        "return": $$return, 
        semigroupArr: semigroupArr, 
        semigroupString: semigroupString, 
        semigroupUnit: semigroupUnit, 
        semigroupoidArr: semigroupoidArr, 
        shl: shl, 
        show: show, 
        showArray: showArray, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showOrdering: showOrdering, 
        showString: showString, 
        showUnit: showUnit, 
        shr: shr, 
        unit: unit, 
        "void": $$void, 
        zshr: zshr, 
        "||": $bar$bar
    };
})();
var PS = PS || {};
PS.Prelude_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeIndex(xs) {  return function(n) {    return xs[n];  };};
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Math = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var abs = Math.abs;;
    var acos = Math.acos;;
    var asin = Math.asin;;
    var atan = Math.atan;;
    function atan2(y){  return function (x) {    return Math.atan2(y, x);  };};
    var ceil = Math.ceil;;
    var cos = Math.cos;;
    var exp = Math.exp;;
    var floor = Math.floor;;
    var log = Math.log;;
    function max(n1){  return function(n2) {    return Math.max(n1, n2);  }};
    function min(n1){  return function(n2) {    return Math.min(n1, n2);  }};
    function pow(n){  return function(p) {    return Math.pow(n, p);  }};
    var round = Math.round;;
    var sin = Math.sin;;
    var sqrt = Math.sqrt;;
    var tan = Math.tan;;
    var e       = Math.E;;
    var ln2     = Math.LN2;;
    var ln10    = Math.LN10;;
    var log2e   = Math.LOG2E;;
    var log10e  = Math.LOG10E;;
    var pi      = Math.PI;;
    var sqrt1_2 = Math.SQRT1_2;;
    var sqrt2   = Math.SQRT2;;
    return {
        abs: abs, 
        acos: acos, 
        asin: asin, 
        atan: atan, 
        atan2: atan2, 
        ceil: ceil, 
        cos: cos, 
        e: e, 
        exp: exp, 
        floor: floor, 
        ln10: ln10, 
        ln2: ln2, 
        log: log, 
        log10e: log10e, 
        log2e: log2e, 
        max: max, 
        min: min, 
        pi: pi, 
        pow: pow, 
        round: round, 
        sin: sin, 
        sqrt: sqrt, 
        sqrt1_2: sqrt1_2, 
        sqrt2: sqrt2, 
        tan: tan
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function mkFn0(fn) {  return function() {    return fn({});  };};
    function mkFn1(fn) {  return function(a) {    return fn(a);  };};
    function mkFn2(fn) {  return function(a, b) {    return fn(a)(b);  };};
    function mkFn3(fn) {  return function(a, b, c) {    return fn(a)(b)(c);  };};
    function mkFn4(fn) {  return function(a, b, c, d) {    return fn(a)(b)(c)(d);  };};
    function mkFn5(fn) {  return function(a, b, c, d, e) {    return fn(a)(b)(c)(d)(e);  };};
    function mkFn6(fn) {  return function(a, b, c, d, e, f) {    return fn(a)(b)(c)(d)(e)(f);  };};
    function mkFn7(fn) {  return function(a, b, c, d, e, f, g) {    return fn(a)(b)(c)(d)(e)(f)(g);  };};
    function mkFn8(fn) {  return function(a, b, c, d, e, f, g, h) {    return fn(a)(b)(c)(d)(e)(f)(g)(h);  };};
    function mkFn9(fn) {  return function(a, b, c, d, e, f, g, h, i) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i);  };};
    function mkFn10(fn) {  return function(a, b, c, d, e, f, g, h, i, j) {    return fn(a)(b)(c)(d)(e)(f)(g)(h)(i)(j);  };};
    function runFn0(fn) {  return fn();};
    function runFn1(fn) {  return function(a) {    return fn(a);  };};
    function runFn2(fn) {  return function(a) {    return function(b) {      return fn(a, b);    };  };};
    function runFn3(fn) {  return function(a) {    return function(b) {      return function(c) {        return fn(a, b, c);      };    };  };};
    function runFn4(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return fn(a, b, c, d);        };      };    };  };};
    function runFn5(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return fn(a, b, c, d, e);          };        };      };    };  };};
    function runFn6(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return fn(a, b, c, d, e, f);            };          };        };      };    };  };};
    function runFn7(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return fn(a, b, c, d, e, f, g);              };            };          };        };      };    };  };};
    function runFn8(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return fn(a, b, c, d, e, f, g, h);                };              };            };          };        };      };    };  };};
    function runFn9(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return fn(a, b, c, d, e, f, g, h, i);                  };                };              };            };          };        };      };    };  };};
    function runFn10(fn) {  return function(a) {    return function(b) {      return function(c) {        return function(d) {          return function(e) {            return function(f) {              return function(g) {                return function(h) {                  return function(i) {                    return function(j) {                      return fn(a, b, c, d, e, f, g, h, i, j);                    };                  };                };              };            };          };        };      };    };  };};
    var on = function (f) {
        return function (g) {
            return function (x) {
                return function (y) {
                    return f(g(x))(g(y));
                };
            };
        };
    };
    return {
        mkFn0: mkFn0, 
        mkFn1: mkFn1, 
        mkFn10: mkFn10, 
        mkFn2: mkFn2, 
        mkFn3: mkFn3, 
        mkFn4: mkFn4, 
        mkFn5: mkFn5, 
        mkFn6: mkFn6, 
        mkFn7: mkFn7, 
        mkFn8: mkFn8, 
        mkFn9: mkFn9, 
        on: on, 
        runFn0: runFn0, 
        runFn1: runFn1, 
        runFn10: runFn10, 
        runFn2: runFn2, 
        runFn3: runFn3, 
        runFn4: runFn4, 
        runFn5: runFn5, 
        runFn6: runFn6, 
        runFn7: runFn7, 
        runFn8: runFn8, 
        runFn9: runFn9
    };
})();
var PS = PS || {};
PS.Data_Eq = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Ref = {
        create: function (value) {
            return value;
        }
    };
    var liftRef = function (_47) {
        return function (_48) {
            return function (_49) {
                return _47(_48)(_49);
            };
        };
    };
    var functorRef = new Prelude.Functor(function (_50) {
        return function (_51) {
            return _50(_51);
        };
    });
    var eqRef = new Prelude.Eq(liftRef(Prelude.refIneq), liftRef(Prelude.refEq));
    return {
        Ref: Ref, 
        eqRef: eqRef, 
        functorRef: functorRef, 
        liftRef: liftRef
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Char = {
        create: function (value) {
            return value;
        }
    };
    
    function toCharCode(c) {
      return c.charCodeAt(0);
    }
    ;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var showChar = new Prelude.Show(function (_57) {
        return "Char " + Prelude.show(Prelude.showString)(_57);
    });
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_53) {
        return function (_54) {
            return _53 === _54;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_55) {
        return function (_56) {
            return Prelude.compare(Prelude.ordString)(_55)(_56);
        };
    });
    var charString = function (_52) {
        return _52;
    };
    return {
        charString: charString, 
        eqChar: eqChar, 
        fromCharCode: fromCharCode, 
        ordChar: ordChar, 
        showChar: showChar, 
        toCharCode: toCharCode
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function charCodeAt(i) {
      return function(s) {
        return s.charCodeAt(i);
      };
    }
    ;
    
    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    function runPure(f) {  return f();};
    function untilE(f) {  return function() {    while (!f());    return {};  };};
    function whileE(f) {  return function(a) {    return function() {      while (f()) {        a();      }      return {};    };  };};
    function forE(lo) {  return function(hi) {    return function(f) {      return function() {        for (var i = lo; i < hi; i++) {          f(i)();        }      };    };  };};
    function foreachE(as) {  return function(f) {    return function() {      for (var i = 0; i < as.length; i++) {        f(as[i])();      }    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        forE: forE, 
        foreachE: foreachE, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE, 
        runPure: runPure, 
        untilE: untilE, 
        whileE: whileE
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Random = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function random() {  return Math.random();};
    return {
        random: random
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeInterleaveEff(f) {  return f;};
    return {
        unsafeInterleaveEff: unsafeInterleaveEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function newSTRef(val) {  return function() {    return { value: val };  };};
    function readSTRef(ref) {  return function() {    return ref.value;  };};
    function modifySTRef(ref) {  return function(f) {    return function() {      return ref.value = f(ref.value);    };  };};
    function writeSTRef(ref) {  return function(a) {    return function() {      return ref.value = a;    };  };};
    function newSTArray(len) {  return function(a) {    return function() {      var arr = [];      for (var i = 0; i < len; i++) {        arr[i] = a;      };      return arr;    };  };};
    function peekSTArray(arr) {  return function(i) {    return function() {      return arr[i];    };  };};
    function pokeSTArray(arr) {  return function(i) {    return function(a) {      return function() {        return arr[i] = a;      };    };  };};
    function runST(f) {  return f;};
    function runSTArray(f) {  return f;};
    return {
        modifySTRef: modifySTRef, 
        newSTArray: newSTArray, 
        newSTRef: newSTRef, 
        peekSTArray: peekSTArray, 
        pokeSTArray: pokeSTArray, 
        readSTRef: readSTRef, 
        runST: runST, 
        runSTArray: runSTArray, 
        writeSTRef: writeSTRef
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    var print = function (__dict_Show_16) {
        return function (o) {
            return trace(Prelude.show(__dict_Show_16)(o));
        };
    };
    return {
        print: print, 
        trace: trace
    };
})();
var PS = PS || {};
PS.Control_Monad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var when = function (__dict_Monad_17) {
        return function (_63) {
            return function (_64) {
                if (_63) {
                    return _64;
                };
                if (!_63) {
                    return Prelude["return"](__dict_Monad_17)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var unless = function (__dict_Monad_18) {
        return function (_65) {
            return function (_66) {
                if (!_65) {
                    return _66;
                };
                if (_65) {
                    return Prelude["return"](__dict_Monad_18)(Prelude.unit);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var replicateM = function (__dict_Monad_19) {
        return function (_58) {
            return function (_59) {
                if (_58 === 0) {
                    return Prelude["return"](__dict_Monad_19)([  ]);
                };
                return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(_59)(function (_4) {
                    return Prelude[">>="](__dict_Monad_19["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_19)(_58 - 1)(_59))(function (_3) {
                        return Prelude["return"](__dict_Monad_19)(Prelude[":"](_4)(_3));
                    });
                });
            };
        };
    };
    var foldM = function (__dict_Monad_20) {
        return function (_60) {
            return function (_61) {
                return function (_62) {
                    if (_62.length === 0) {
                        return Prelude["return"](__dict_Monad_20)(_61);
                    };
                    if (_62.length >= 1) {
                        var _421 = _62.slice(1);
                        return Prelude[">>="](__dict_Monad_20["__superclass_Prelude.Bind_1"]())(_60(_61)(_62[0]))(function (a$prime) {
                            return foldM(__dict_Monad_20)(_60)(a$prime)(_421);
                        });
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    return {
        foldM: foldM, 
        replicateM: replicateM, 
        unless: unless, 
        when: when
    };
})();
var PS = PS || {};
PS.Control_Lazy = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Lazy(defer) {
        this.defer = defer;
    };
    function Lazy1(defer1) {
        this.defer1 = defer1;
    };
    function Lazy2(defer2) {
        this.defer2 = defer2;
    };
    var defer2 = function (dict) {
        return dict.defer2;
    };
    var fix2 = function (__dict_Lazy2_21) {
        return function (f) {
            return defer2(__dict_Lazy2_21)(function (_) {
                return f(fix2(__dict_Lazy2_21)(f));
            });
        };
    };
    var defer1 = function (dict) {
        return dict.defer1;
    };
    var fix1 = function (__dict_Lazy1_22) {
        return function (f) {
            return defer1(__dict_Lazy1_22)(function (_) {
                return f(fix1(__dict_Lazy1_22)(f));
            });
        };
    };
    var defer = function (dict) {
        return dict.defer;
    };
    var fix = function (__dict_Lazy_23) {
        return function (f) {
            return defer(__dict_Lazy_23)(function (_) {
                return f(fix(__dict_Lazy_23)(f));
            });
        };
    };
    return {
        Lazy: Lazy, 
        Lazy1: Lazy1, 
        Lazy2: Lazy2, 
        defer: defer, 
        defer1: defer1, 
        defer2: defer2, 
        fix: fix, 
        fix1: fix1, 
        fix2: fix2
    };
})();
var PS = PS || {};
PS.Control_Extend = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Extend($less$less$eq, __superclass_Prelude$dotFunctor_0) {
        this["<<="] = $less$less$eq;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$less$eq = function (dict) {
        return dict["<<="];
    };
    var $eq$less$eq = function (__dict_Extend_24) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return f($less$less$eq(__dict_Extend_24)(g)(w));
                };
            };
        };
    };
    var $eq$greater$eq = function (__dict_Extend_25) {
        return function (f) {
            return function (g) {
                return function (w) {
                    return g($less$less$eq(__dict_Extend_25)(f)(w));
                };
            };
        };
    };
    var $eq$greater$greater = function (__dict_Extend_26) {
        return function (w) {
            return function (f) {
                return $less$less$eq(__dict_Extend_26)(f)(w);
            };
        };
    };
    var extendArr = function (__dict_Semigroup_27) {
        return new Extend(function (f) {
            return function (g) {
                return function (w) {
                    return f(function (w$prime) {
                        return g(Prelude["<>"](__dict_Semigroup_27)(w)(w$prime));
                    });
                };
            };
        }, function () {
            return Prelude.functorArr;
        });
    };
    var duplicate = function (__dict_Extend_28) {
        return function (w) {
            return $less$less$eq(__dict_Extend_28)(Prelude.id(Prelude.categoryArr))(w);
        };
    };
    return {
        "<<=": $less$less$eq, 
        "=<=": $eq$less$eq, 
        "=>=": $eq$greater$eq, 
        "=>>": $eq$greater$greater, 
        Extend: Extend, 
        duplicate: duplicate, 
        extendArr: extendArr
    };
})();
var PS = PS || {};
PS.Control_Comonad = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Comonad(__superclass_Control$dotExtend$dotExtend_0, extract) {
        this["__superclass_Control.Extend.Extend_0"] = __superclass_Control$dotExtend$dotExtend_0;
        this.extract = extract;
    };
    var extract = function (dict) {
        return dict.extract;
    };
    return {
        Comonad: Comonad, 
        extract: extract
    };
})();
var PS = PS || {};
PS.Control_Bind = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $greater$eq$greater = function (__dict_Bind_29) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return Prelude[">>="](__dict_Bind_29)(f(a))(g);
                };
            };
        };
    };
    var $eq$less$less = function (__dict_Bind_30) {
        return function (f) {
            return function (m) {
                return Prelude[">>="](__dict_Bind_30)(m)(f);
            };
        };
    };
    var $less$eq$less = function (__dict_Bind_31) {
        return function (f) {
            return function (g) {
                return function (a) {
                    return $eq$less$less(__dict_Bind_31)(f)(g(a));
                };
            };
        };
    };
    var join = function (__dict_Bind_32) {
        return function (m) {
            return Prelude[">>="](__dict_Bind_32)(m)(Prelude.id(Prelude.categoryArr));
        };
    };
    var ifM = function (__dict_Bind_33) {
        return function (cond) {
            return function (t) {
                return function (f) {
                    return Prelude[">>="](__dict_Bind_33)(cond)(function (cond$prime) {
                        return cond$prime ? t : f;
                    });
                };
            };
        };
    };
    return {
        "<=<": $less$eq$less, 
        "=<<": $eq$less$less, 
        ">=>": $greater$eq$greater, 
        ifM: ifM, 
        join: join
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var $less$times = function (__dict_Apply_34) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_34)(Prelude["<$>"](__dict_Apply_34["__superclass_Prelude.Functor_0"]())(Prelude["const"])(a))(b);
            };
        };
    };
    var $times$greater = function (__dict_Apply_35) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_35)(Prelude["<$>"](__dict_Apply_35["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    var lift5 = function (__dict_Apply_36) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return function (e) {
                                return Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<*>"](__dict_Apply_36)(Prelude["<$>"](__dict_Apply_36["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d))(e);
                            };
                        };
                    };
                };
            };
        };
    };
    var lift4 = function (__dict_Apply_37) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return function (d) {
                            return Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<*>"](__dict_Apply_37)(Prelude["<$>"](__dict_Apply_37["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c))(d);
                        };
                    };
                };
            };
        };
    };
    var lift3 = function (__dict_Apply_38) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return function (c) {
                        return Prelude["<*>"](__dict_Apply_38)(Prelude["<*>"](__dict_Apply_38)(Prelude["<$>"](__dict_Apply_38["__superclass_Prelude.Functor_0"]())(f)(a))(b))(c);
                    };
                };
            };
        };
    };
    var lift2 = function (__dict_Apply_39) {
        return function (f) {
            return function (a) {
                return function (b) {
                    return Prelude["<*>"](__dict_Apply_39)(Prelude["<$>"](__dict_Apply_39["__superclass_Prelude.Functor_0"]())(f)(a))(b);
                };
            };
        };
    };
    var forever = function (__dict_Apply_40) {
        return function (a) {
            return $times$greater(__dict_Apply_40)(a)(forever(__dict_Apply_40)(a));
        };
    };
    return {
        "*>": $times$greater, 
        "<*": $less$times, 
        forever: forever, 
        lift2: lift2, 
        lift3: lift3, 
        lift4: lift4, 
        lift5: lift5
    };
})();
var PS = PS || {};
PS.Control_Alt = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Alt($less$bar$greater, __superclass_Prelude$dotFunctor_0) {
        this["<|>"] = $less$bar$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var $less$bar$greater = function (dict) {
        return dict["<|>"];
    };
    return {
        "<|>": $less$bar$greater, 
        Alt: Alt
    };
})();
var PS = PS || {};
PS.Control_Plus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function Plus(__superclass_Control$dotAlt$dotAlt_0, empty) {
        this["__superclass_Control.Alt.Alt_0"] = __superclass_Control$dotAlt$dotAlt_0;
        this.empty = empty;
    };
    var empty = function (dict) {
        return dict.empty;
    };
    return {
        Plus: Plus, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Control_Alternative = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Lazy = PS.Control_Lazy;
    var Control_Alt = PS.Control_Alt;
    function Alternative(__superclass_Control$dotPlus$dotPlus_1, __superclass_Prelude$dotApplicative_0) {
        this["__superclass_Control.Plus.Plus_1"] = __superclass_Control$dotPlus$dotPlus_1;
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
    };
    var some = function (__dict_Alternative_41) {
        return function (__dict_Lazy1_42) {
            return function (v) {
                return Prelude["<*>"]((__dict_Alternative_41["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_41["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(v))(Control_Lazy.defer1(__dict_Lazy1_42)(function (_) {
                    return many(__dict_Alternative_41)(__dict_Lazy1_42)(v);
                }));
            };
        };
    };
    var many = function (__dict_Alternative_43) {
        return function (__dict_Lazy1_44) {
            return function (v) {
                return Control_Alt["<|>"]((__dict_Alternative_43["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_43)(__dict_Lazy1_44)(v))(Prelude.pure(__dict_Alternative_43["__superclass_Prelude.Applicative_0"]())([  ]));
            };
        };
    };
    return {
        Alternative: Alternative, 
        many: many, 
        some: some
    };
})();
var PS = PS || {};
PS.Control_MonadPlus = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Plus = PS.Control_Plus;
    function MonadPlus(__superclass_Control$dotAlternative$dotAlternative_1, __superclass_Prelude$dotMonad_0) {
        this["__superclass_Control.Alternative.Alternative_1"] = __superclass_Control$dotAlternative$dotAlternative_1;
        this["__superclass_Prelude.Monad_0"] = __superclass_Prelude$dotMonad_0;
    };
    var guard = function (__dict_MonadPlus_45) {
        return function (_67) {
            if (_67) {
                return Prelude["return"](__dict_MonadPlus_45["__superclass_Prelude.Monad_0"]())(Prelude.unit);
            };
            if (!_67) {
                return Control_Plus.empty((__dict_MonadPlus_45["__superclass_Control.Alternative.Alternative_1"]())["__superclass_Control.Plus.Plus_1"]());
            };
            throw new Error("Failed pattern match");
        };
    };
    return {
        MonadPlus: MonadPlus, 
        guard: guard
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    function Left(value0) {
        this.value0 = value0;
    };
    Left.create = function (value0) {
        return new Left(value0);
    };
    function Right(value0) {
        this.value0 = value0;
    };
    Right.create = function (value0) {
        return new Right(value0);
    };
    var showEither = function (__dict_Show_46) {
        return function (__dict_Show_47) {
            return new Prelude.Show(function (_77) {
                if (_77 instanceof Left) {
                    return "Left (" + (Prelude.show(__dict_Show_46)(_77.value0) + ")");
                };
                if (_77 instanceof Right) {
                    return "Right (" + (Prelude.show(__dict_Show_47)(_77.value0) + ")");
                };
                throw new Error("Failed pattern match");
            });
        };
    };
    var functorEither = new Prelude.Functor(function (_71) {
        return function (_72) {
            if (_72 instanceof Left) {
                return new Left(_72.value0);
            };
            if (_72 instanceof Right) {
                return new Right(_71(_72.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    var eqEither = function (__dict_Eq_50) {
        return function (__dict_Eq_51) {
            return new Prelude.Eq(function (a) {
                return function (b) {
                    return !Prelude["=="](eqEither(__dict_Eq_50)(__dict_Eq_51))(a)(b);
                };
            }, function (_78) {
                return function (_79) {
                    if (_78 instanceof Left && _79 instanceof Left) {
                        return Prelude["=="](__dict_Eq_50)(_78.value0)(_79.value0);
                    };
                    if (_78 instanceof Right && _79 instanceof Right) {
                        return Prelude["=="](__dict_Eq_51)(_78.value0)(_79.value0);
                    };
                    return false;
                };
            });
        };
    };
    var ordEither = function (__dict_Ord_48) {
        return function (__dict_Ord_49) {
            return new Prelude.Ord(function () {
                return eqEither(__dict_Ord_48["__superclass_Prelude.Eq_0"]())(__dict_Ord_49["__superclass_Prelude.Eq_0"]());
            }, function (_80) {
                return function (_81) {
                    if (_80 instanceof Left && _81 instanceof Left) {
                        return Prelude.compare(__dict_Ord_48)(_80.value0)(_81.value0);
                    };
                    if (_80 instanceof Right && _81 instanceof Right) {
                        return Prelude.compare(__dict_Ord_49)(_80.value0)(_81.value0);
                    };
                    if (_80 instanceof Left) {
                        return Prelude.LT.value;
                    };
                    if (_81 instanceof Left) {
                        return Prelude.GT.value;
                    };
                    throw new Error("Failed pattern match");
                };
            });
        };
    };
    var either = function (_68) {
        return function (_69) {
            return function (_70) {
                if (_70 instanceof Left) {
                    return _68(_70.value0);
                };
                if (_70 instanceof Right) {
                    return _69(_70.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isLeft = either(Prelude["const"](true))(Prelude["const"](false));
    var isRight = either(Prelude["const"](false))(Prelude["const"](true));
    var applyEither = new Prelude.Apply(function (_73) {
        return function (_74) {
            if (_73 instanceof Left) {
                return new Left(_73.value0);
            };
            if (_73 instanceof Right) {
                return Prelude["<$>"](functorEither)(_73.value0)(_74);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    var altEither = new Control_Alt.Alt(function (_75) {
        return function (_76) {
            if (_75 instanceof Left) {
                return _76;
            };
            return _75;
        };
    }, function () {
        return functorEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        altEither: altEither, 
        applicativeEither: applicativeEither, 
        applyEither: applyEither, 
        bindEither: bindEither, 
        either: either, 
        eqEither: eqEither, 
        functorEither: functorEither, 
        isLeft: isLeft, 
        isRight: isRight, 
        monadEither: monadEither, 
        ordEither: ordEither, 
        showEither: showEither
    };
})();
var PS = PS || {};
PS.Data_Either_Nested = (function () {
    "use strict";
    var Data_Either = PS.Data_Either;
    var Prelude = PS.Prelude;
    var choice2 = Data_Either.either;
    var choice3 = function (a) {
        return function (b) {
            return function (c) {
                return Data_Either.either(a)(choice2(b)(c));
            };
        };
    };
    var choice4 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return Data_Either.either(a)(choice3(b)(c)(d));
                };
            };
        };
    };
    var choice5 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return Data_Either.either(a)(choice4(b)(c)(d)(e));
                    };
                };
            };
        };
    };
    var choice6 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return Data_Either.either(a)(choice5(b)(c)(d)(e)(f));
                        };
                    };
                };
            };
        };
    };
    var choice7 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return Data_Either.either(a)(choice6(b)(c)(d)(e)(f)(g));
                            };
                        };
                    };
                };
            };
        };
    };
    var choice8 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return Data_Either.either(a)(choice7(b)(c)(d)(e)(f)(g)(h));
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice9 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return Data_Either.either(a)(choice8(b)(c)(d)(e)(f)(g)(h)(i));
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    var choice10 = function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return function (f) {
                            return function (g) {
                                return function (h) {
                                    return function (i) {
                                        return function (j) {
                                            return Data_Either.either(a)(choice9(b)(c)(d)(e)(f)(g)(h)(i)(j));
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    return {
        choice10: choice10, 
        choice2: choice2, 
        choice3: choice3, 
        choice4: choice4, 
        choice5: choice5, 
        choice6: choice6, 
        choice7: choice7, 
        choice8: choice8, 
        choice9: choice9
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Extend = PS.Control_Extend;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function Nothing() {

    };
    Nothing.value = new Nothing();
    function Just(value0) {
        this.value0 = value0;
    };
    Just.create = function (value0) {
        return new Just(value0);
    };
    var showMaybe = function (__dict_Show_52) {
        return new Prelude.Show(function (_97) {
            if (_97 instanceof Just) {
                return "Just (" + (Prelude.show(__dict_Show_52)(_97.value0) + ")");
            };
            if (_97 instanceof Nothing) {
                return "Nothing";
            };
            throw new Error("Failed pattern match");
        });
    };
    var semigroupMaybe = function (__dict_Semigroup_53) {
        return new Prelude.Semigroup(function (_95) {
            return function (_96) {
                if (_95 instanceof Nothing) {
                    return _96;
                };
                if (_96 instanceof Nothing) {
                    return _95;
                };
                if (_95 instanceof Just && _96 instanceof Just) {
                    return new Just(Prelude["<>"](__dict_Semigroup_53)(_95.value0)(_96.value0));
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var maybe = function (_82) {
        return function (_83) {
            return function (_84) {
                if (_84 instanceof Nothing) {
                    return _82;
                };
                if (_84 instanceof Just) {
                    return _83(_84.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var isNothing = maybe(true)(Prelude["const"](false));
    var isJust = maybe(false)(Prelude["const"](true));
    var functorMaybe = new Prelude.Functor(function (_85) {
        return function (_86) {
            if (_86 instanceof Just) {
                return new Just(_85(_86.value0));
            };
            return Nothing.value;
        };
    });
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    var extendMaybe = new Control_Extend.Extend(function (_93) {
        return function (_94) {
            if (_94 instanceof Nothing) {
                return Nothing.value;
            };
            return Just.create(_93(_94));
        };
    }, function () {
        return functorMaybe;
    });
    var eqMaybe = function (__dict_Eq_55) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_55))(a)(b);
            };
        }, function (_98) {
            return function (_99) {
                if (_98 instanceof Nothing && _99 instanceof Nothing) {
                    return true;
                };
                if (_98 instanceof Just && _99 instanceof Just) {
                    return Prelude["=="](__dict_Eq_55)(_98.value0)(_99.value0);
                };
                return false;
            };
        });
    };
    var ordMaybe = function (__dict_Ord_54) {
        return new Prelude.Ord(function () {
            return eqMaybe(__dict_Ord_54["__superclass_Prelude.Eq_0"]());
        }, function (_100) {
            return function (_101) {
                if (_100 instanceof Just && _101 instanceof Just) {
                    return Prelude.compare(__dict_Ord_54)(_100.value0)(_101.value0);
                };
                if (_100 instanceof Nothing && _101 instanceof Nothing) {
                    return Prelude.EQ.value;
                };
                if (_100 instanceof Nothing) {
                    return Prelude.LT.value;
                };
                if (_101 instanceof Nothing) {
                    return Prelude.GT.value;
                };
                throw new Error("Failed pattern match");
            };
        });
    };
    var applyMaybe = new Prelude.Apply(function (_87) {
        return function (_88) {
            if (_87 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_87.value0)(_88);
            };
            if (_87 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    var bindMaybe = new Prelude.Bind(function (_91) {
        return function (_92) {
            if (_91 instanceof Just) {
                return _92(_91.value0);
            };
            if (_91 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    var altMaybe = new Control_Alt.Alt(function (_89) {
        return function (_90) {
            if (_89 instanceof Nothing) {
                return _90;
            };
            return _89;
        };
    }, function () {
        return functorMaybe;
    });
    var plusMaybe = new Control_Plus.Plus(function () {
        return altMaybe;
    }, Nothing.value);
    var alternativeMaybe = new Control_Alternative.Alternative(function () {
        return plusMaybe;
    }, function () {
        return applicativeMaybe;
    });
    var monadPlusMaybe = new Control_MonadPlus.MonadPlus(function () {
        return alternativeMaybe;
    }, function () {
        return monadMaybe;
    });
    return {
        Just: Just, 
        Nothing: Nothing, 
        altMaybe: altMaybe, 
        alternativeMaybe: alternativeMaybe, 
        applicativeMaybe: applicativeMaybe, 
        applyMaybe: applyMaybe, 
        bindMaybe: bindMaybe, 
        eqMaybe: eqMaybe, 
        extendMaybe: extendMaybe, 
        fromMaybe: fromMaybe, 
        functorMaybe: functorMaybe, 
        isJust: isJust, 
        isNothing: isNothing, 
        maybe: maybe, 
        monadMaybe: monadMaybe, 
        monadPlusMaybe: monadPlusMaybe, 
        ordMaybe: ordMaybe, 
        plusMaybe: plusMaybe, 
        semigroupMaybe: semigroupMaybe, 
        showMaybe: showMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    function snoc(l) {  return function (e) {    var l1 = l.slice();    l1.push(e);     return l1;  };};
    function length (xs) {  return xs.length;};
    function findIndex (f) {  return function (arr) {    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function findLastIndex (f) {  return function (arr) {    for (var i = arr.length - 1; i >= 0; i--) {      if (f(arr[i])) {        return i;      }    }    return -1;  };};
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function concat (xss) {  var result = [];  for (var i = 0, l = xss.length; i < l; i++) {    result.push.apply(result, xss[i]);  }  return result;};
    function reverse (l) {  return l.slice().reverse();};
    function drop (n) {  return function (l) {    return l.slice(n);  };};
    function slice (s) {  return function (e) {    return function (l) {      return l.slice(s, e);    };  };};
    function insertAt (index) {  return function (a) {    return function (l) {      var l1 = l.slice();      l1.splice(index, 0, a);      return l1;    };   };};
    function deleteAt (index) {  return function (n) {    return function (l) {      var l1 = l.slice();      l1.splice(index, n);      return l1;    };   };};
    function updateAt (index) {  return function (a) {    return function (l) {      var i = ~~index;      if (i < 0 || i >= l.length) return l;      var l1 = l.slice();      l1[i] = a;      return l1;    };   };};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    function zipWith (f) {  return function (xs) {    return function (ys) {      var l = xs.length < ys.length ? xs.length : ys.length;      var result = new Array(l);      for (var i = 0; i < l; i++) {        result[i] = f(xs[i])(ys[i]);      }      return result;    };  };};
    function sortJS (f) {  return function (l) {    return l.slice().sort(function (x, y) {      return f(x)(y);    });  };};
    var $dot$dot = range;
    var $bang$bang = function (xs) {
        return function (n) {
            var isInt = function (n_1) {
                return n_1 !== ~~n_1;
            };
            return n < 0 || (n >= length(xs) || isInt(n)) ? Data_Maybe.Nothing.value : new Data_Maybe.Just(xs[n]);
        };
    };
    var take = function (n) {
        return slice(0)(n);
    };
    var tail = function (_104) {
        if (_104.length >= 1) {
            var _489 = _104.slice(1);
            return new Data_Maybe.Just(_489);
        };
        return Data_Maybe.Nothing.value;
    };
    var span = (function () {
        var go = function (__copy__120) {
            return function (__copy__121) {
                return function (__copy__122) {
                    var _120 = __copy__120;
                    var _121 = __copy__121;
                    var _122 = __copy__122;
                    tco: while (true) {
                        if (_122.length >= 1) {
                            var _494 = _122.slice(1);
                            if (_121(_122[0])) {
                                var __tco__120 = Prelude[":"](_122[0])(_120);
                                var __tco__121 = _121;
                                _120 = __tco__120;
                                _121 = __tco__121;
                                _122 = _494;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_120), 
                            rest: _122
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    var sortBy = function (comp) {
        return function (xs) {
            var comp$prime = function (x) {
                return function (y) {
                    var _495 = comp(x)(y);
                    if (_495 instanceof Prelude.GT) {
                        return 1;
                    };
                    if (_495 instanceof Prelude.EQ) {
                        return 0;
                    };
                    if (_495 instanceof Prelude.LT) {
                        return -1;
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return sortJS(comp$prime)(xs);
        };
    };
    var sort = function (__dict_Ord_56) {
        return function (xs) {
            return sortBy(Prelude.compare(__dict_Ord_56))(xs);
        };
    };
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    var $$null = function (_106) {
        if (_106.length === 0) {
            return true;
        };
        return false;
    };
    var nubBy = function (_113) {
        return function (_114) {
            if (_114.length === 0) {
                return [  ];
            };
            if (_114.length >= 1) {
                var _500 = _114.slice(1);
                return Prelude[":"](_114[0])(nubBy(_113)(filter(function (y) {
                    return !_113(_114[0])(y);
                })(_500)));
            };
            throw new Error("Failed pattern match");
        };
    };
    var nub = function (__dict_Eq_57) {
        return nubBy(Prelude["=="](__dict_Eq_57));
    };
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    var last = function (__copy__103) {
        var _103 = __copy__103;
        tco: while (true) {
            if (_103.length >= 1) {
                var _503 = _103.slice(1);
                if (_503.length === 0) {
                    return new Data_Maybe.Just(_103[0]);
                };
            };
            if (_103.length >= 1) {
                var _505 = _103.slice(1);
                _103 = _505;
                continue tco;
            };
            return Data_Maybe.Nothing.value;
        };
    };
    var intersectBy = function (_110) {
        return function (_111) {
            return function (_112) {
                if (_111.length === 0) {
                    return [  ];
                };
                if (_112.length === 0) {
                    return [  ];
                };
                var el = function (x) {
                    return findIndex(_110(x))(_112) >= 0;
                };
                return filter(el)(_111);
            };
        };
    };
    var intersect = function (__dict_Eq_58) {
        return intersectBy(Prelude["=="](__dict_Eq_58));
    };
    var init = function (_105) {
        if (_105.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        return new Data_Maybe.Just(slice(0)(length(_105) - 1)(_105));
    };
    var head = function (_102) {
        if (_102.length >= 1) {
            var _512 = _102.slice(1);
            return new Data_Maybe.Just(_102[0]);
        };
        return Data_Maybe.Nothing.value;
    };
    var groupBy = (function () {
        var go = function (__copy__117) {
            return function (__copy__118) {
                return function (__copy__119) {
                    var _117 = __copy__117;
                    var _118 = __copy__118;
                    var _119 = __copy__119;
                    tco: while (true) {
                        if (_119.length === 0) {
                            return reverse(_117);
                        };
                        if (_119.length >= 1) {
                            var _517 = _119.slice(1);
                            var sp = span(_118(_119[0]))(_517);
                            var __tco__117 = Prelude[":"](Prelude[":"](_119[0])(sp.init))(_117);
                            var __tco__118 = _118;
                            _117 = __tco__117;
                            _118 = __tco__118;
                            _119 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var group = function (__dict_Eq_59) {
        return function (xs) {
            return groupBy(Prelude["=="](__dict_Eq_59))(xs);
        };
    };
    var group$prime = function (__dict_Ord_60) {
        return Prelude["<<<"](Prelude.semigroupoidArr)(group(__dict_Ord_60["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_60));
    };
    var functorArray = new Prelude.Functor(map);
    var elemLastIndex = function (__dict_Eq_61) {
        return function (x) {
            return findLastIndex(Prelude["=="](__dict_Eq_61)(x));
        };
    };
    var elemIndex = function (__dict_Eq_62) {
        return function (x) {
            return findIndex(Prelude["=="](__dict_Eq_62)(x));
        };
    };
    var deleteBy = function (_107) {
        return function (_108) {
            return function (_109) {
                if (_109.length === 0) {
                    return [  ];
                };
                var _521 = findIndex(_107(_108))(_109);
                if (_521 < 0) {
                    return _109;
                };
                return deleteAt(_521)(1)(_109);
            };
        };
    };
    var $$delete = function (__dict_Eq_63) {
        return deleteBy(Prelude["=="](__dict_Eq_63));
    };
    var $bslash$bslash = function (__dict_Eq_64) {
        return function (xs) {
            return function (ys) {
                var go = function (__copy__115) {
                    return function (__copy__116) {
                        var _115 = __copy__115;
                        var _116 = __copy__116;
                        tco: while (true) {
                            if (_116.length === 0) {
                                return _115;
                            };
                            if (_115.length === 0) {
                                return [  ];
                            };
                            if (_116.length >= 1) {
                                var _525 = _116.slice(1);
                                var __tco__115 = $$delete(__dict_Eq_64)(_116[0])(_115);
                                _115 = __tco__115;
                                _116 = _525;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
                return go(xs)(ys);
            };
        };
    };
    var catMaybes = concatMap(Data_Maybe.maybe([  ])(singleton));
    var monadArray = new Prelude.Monad(function () {
        return applicativeArray;
    }, function () {
        return bindArray;
    });
    var bindArray = new Prelude.Bind(Prelude.flip(concatMap), function () {
        return applyArray;
    });
    var applyArray = new Prelude.Apply(Prelude.ap(monadArray), function () {
        return functorArray;
    });
    var applicativeArray = new Prelude.Applicative(function () {
        return applyArray;
    }, singleton);
    var altArray = new Control_Alt.Alt(append, function () {
        return functorArray;
    });
    var plusArray = new Control_Plus.Plus(function () {
        return altArray;
    }, [  ]);
    var alternativeArray = new Control_Alternative.Alternative(function () {
        return plusArray;
    }, function () {
        return applicativeArray;
    });
    var monadPlusArray = new Control_MonadPlus.MonadPlus(function () {
        return alternativeArray;
    }, function () {
        return monadArray;
    });
    return {
        "!!": $bang$bang, 
        "..": $dot$dot, 
        "\\\\": $bslash$bslash, 
        altArray: altArray, 
        alternativeArray: alternativeArray, 
        append: append, 
        applicativeArray: applicativeArray, 
        applyArray: applyArray, 
        bindArray: bindArray, 
        catMaybes: catMaybes, 
        concat: concat, 
        concatMap: concatMap, 
        "delete": $$delete, 
        deleteAt: deleteAt, 
        deleteBy: deleteBy, 
        drop: drop, 
        elemIndex: elemIndex, 
        elemLastIndex: elemLastIndex, 
        filter: filter, 
        findIndex: findIndex, 
        findLastIndex: findLastIndex, 
        functorArray: functorArray, 
        group: group, 
        "group'": group$prime, 
        groupBy: groupBy, 
        head: head, 
        init: init, 
        insertAt: insertAt, 
        intersect: intersect, 
        intersectBy: intersectBy, 
        last: last, 
        length: length, 
        map: map, 
        mapMaybe: mapMaybe, 
        monadArray: monadArray, 
        monadPlusArray: monadPlusArray, 
        nub: nub, 
        nubBy: nubBy, 
        "null": $$null, 
        plusArray: plusArray, 
        range: range, 
        reverse: reverse, 
        semigroupArray: semigroupArray, 
        singleton: singleton, 
        snoc: snoc, 
        sort: sort, 
        sortBy: sortBy, 
        span: span, 
        tail: tail, 
        take: take, 
        updateAt: updateAt, 
        zipWith: zipWith
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var fromJust = function (_123) {
        if (_123 instanceof Data_Maybe.Just) {
            return _123.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Array_Unsafe = (function () {
    "use strict";
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    var Data_Array = PS.Data_Array;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Prelude = PS.Prelude;
    var tail = function (_125) {
        if (_125.length >= 1) {
            var _530 = _125.slice(1);
            return _530;
        };
        throw new Error("Failed pattern match");
    };
    var last = function (xs) {
        return xs[Data_Array.length(xs) - 1];
    };
    var init = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Data_Array.init);
    var head = function (_124) {
        if (_124.length >= 1) {
            var _533 = _124.slice(1);
            return _124[0];
        };
        throw new Error("Failed pattern match");
    };
    return {
        head: head, 
        init: init, 
        last: last, 
        tail: tail
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Array = PS.Data_Array;
    function Monoid(__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidUnit = new Monoid(function () {
        return Prelude.semigroupUnit;
    }, Prelude.unit);
    var monoidString = new Monoid(function () {
        return Prelude.semigroupString;
    }, "");
    var monoidMaybe = function (__dict_Semigroup_65) {
        return new Monoid(function () {
            return Data_Maybe.semigroupMaybe(__dict_Semigroup_65);
        }, Data_Maybe.Nothing.value);
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    var monoidArr = function (__dict_Monoid_66) {
        return new Monoid(function () {
            return Prelude.semigroupArr(__dict_Monoid_66["__superclass_Prelude.Semigroup_0"]());
        }, Prelude["const"](mempty(__dict_Monoid_66)));
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArr: monoidArr, 
        monoidArray: monoidArray, 
        monoidMaybe: monoidMaybe, 
        monoidString: monoidString, 
        monoidUnit: monoidUnit
    };
})();
var PS = PS || {};
PS.Data_Monoid_All = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var All = {
        create: function (value) {
            return value;
        }
    };
    var showAll = new Prelude.Show(function (_131) {
        return "All (" + (Prelude.show(Prelude.showBoolean)(_131) + ")");
    });
    var semigroupAll = new Prelude.Semigroup(function (_132) {
        return function (_133) {
            return _132 && _133;
        };
    });
    var runAll = function (_126) {
        return _126;
    };
    var monoidAll = new Data_Monoid.Monoid(function () {
        return semigroupAll;
    }, true);
    var eqAll = new Prelude.Eq(function (_129) {
        return function (_130) {
            return _129 !== _130;
        };
    }, function (_127) {
        return function (_128) {
            return _127 === _128;
        };
    });
    return {
        All: All, 
        eqAll: eqAll, 
        monoidAll: monoidAll, 
        runAll: runAll, 
        semigroupAll: semigroupAll, 
        showAll: showAll
    };
})();
var PS = PS || {};
PS.Data_Monoid_Any = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Any = {
        create: function (value) {
            return value;
        }
    };
    var showAny = new Prelude.Show(function (_139) {
        return "Any (" + (Prelude.show(Prelude.showBoolean)(_139) + ")");
    });
    var semigroupAny = new Prelude.Semigroup(function (_140) {
        return function (_141) {
            return _140 || _141;
        };
    });
    var runAny = function (_134) {
        return _134;
    };
    var monoidAny = new Data_Monoid.Monoid(function () {
        return semigroupAny;
    }, false);
    var eqAny = new Prelude.Eq(function (_137) {
        return function (_138) {
            return _137 !== _138;
        };
    }, function (_135) {
        return function (_136) {
            return _135 === _136;
        };
    });
    return {
        Any: Any, 
        eqAny: eqAny, 
        monoidAny: monoidAny, 
        runAny: runAny, 
        semigroupAny: semigroupAny, 
        showAny: showAny
    };
})();
var PS = PS || {};
PS.Data_Monoid_Dual = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Dual = {
        create: function (value) {
            return value;
        }
    };
    var showDual = function (__dict_Show_67) {
        return new Prelude.Show(function (_149) {
            return "Dual (" + (Prelude.show(__dict_Show_67)(_149) + ")");
        });
    };
    var semigroupDual = function (__dict_Semigroup_68) {
        return new Prelude.Semigroup(function (_150) {
            return function (_151) {
                return Prelude["<>"](__dict_Semigroup_68)(_151)(_150);
            };
        });
    };
    var runDual = function (_142) {
        return _142;
    };
    var monoidDual = function (__dict_Monoid_70) {
        return new Data_Monoid.Monoid(function () {
            return semigroupDual(__dict_Monoid_70["__superclass_Prelude.Semigroup_0"]());
        }, Data_Monoid.mempty(__dict_Monoid_70));
    };
    var eqDual = function (__dict_Eq_71) {
        return new Prelude.Eq(function (_145) {
            return function (_146) {
                return Prelude["/="](__dict_Eq_71)(_145)(_146);
            };
        }, function (_143) {
            return function (_144) {
                return Prelude["=="](__dict_Eq_71)(_143)(_144);
            };
        });
    };
    var ordDual = function (__dict_Ord_69) {
        return new Prelude.Ord(function () {
            return eqDual(__dict_Ord_69["__superclass_Prelude.Eq_0"]());
        }, function (_147) {
            return function (_148) {
                return Prelude.compare(__dict_Ord_69)(_147)(_148);
            };
        });
    };
    return {
        Dual: Dual, 
        eqDual: eqDual, 
        monoidDual: monoidDual, 
        ordDual: ordDual, 
        runDual: runDual, 
        semigroupDual: semigroupDual, 
        showDual: showDual
    };
})();
var PS = PS || {};
PS.Data_Monoid_Endo = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Endo = {
        create: function (value) {
            return value;
        }
    };
    var semigroupEndo = new Prelude.Semigroup(function (_153) {
        return function (_154) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(_153)(_154);
        };
    });
    var runEndo = function (_152) {
        return _152;
    };
    var monoidEndo = new Data_Monoid.Monoid(function () {
        return semigroupEndo;
    }, Prelude.id(Prelude.categoryArr));
    return {
        Endo: Endo, 
        monoidEndo: monoidEndo, 
        runEndo: runEndo, 
        semigroupEndo: semigroupEndo
    };
})();
var PS = PS || {};
PS.Data_Monoid_Product = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Product = {
        create: function (value) {
            return value;
        }
    };
    var showProduct = new Prelude.Show(function (_162) {
        return "Product (" + (Prelude.show(Prelude.showNumber)(_162) + ")");
    });
    var semigroupProduct = new Prelude.Semigroup(function (_163) {
        return function (_164) {
            return _163 * _164;
        };
    });
    var runProduct = function (_155) {
        return _155;
    };
    var monoidProduct = new Data_Monoid.Monoid(function () {
        return semigroupProduct;
    }, 1);
    var eqProduct = new Prelude.Eq(function (_158) {
        return function (_159) {
            return _158 !== _159;
        };
    }, function (_156) {
        return function (_157) {
            return _156 === _157;
        };
    });
    var ordProduct = new Prelude.Ord(function () {
        return eqProduct;
    }, function (_160) {
        return function (_161) {
            return Prelude.compare(Prelude.ordNumber)(_160)(_161);
        };
    });
    return {
        Product: Product, 
        eqProduct: eqProduct, 
        monoidProduct: monoidProduct, 
        ordProduct: ordProduct, 
        runProduct: runProduct, 
        semigroupProduct: semigroupProduct, 
        showProduct: showProduct
    };
})();
var PS = PS || {};
PS.Data_Monoid_Sum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Sum = {
        create: function (value) {
            return value;
        }
    };
    var showSum = new Prelude.Show(function (_172) {
        return "Sum (" + (Prelude.show(Prelude.showNumber)(_172) + ")");
    });
    var semigroupSum = new Prelude.Semigroup(function (_173) {
        return function (_174) {
            return _173 + _174;
        };
    });
    var runSum = function (_165) {
        return _165;
    };
    var monoidSum = new Data_Monoid.Monoid(function () {
        return semigroupSum;
    }, 0);
    var eqSum = new Prelude.Eq(function (_168) {
        return function (_169) {
            return _168 !== _169;
        };
    }, function (_166) {
        return function (_167) {
            return _166 === _167;
        };
    });
    var ordSum = new Prelude.Ord(function () {
        return eqSum;
    }, function (_170) {
        return function (_171) {
            return Prelude.compare(Prelude.ordNumber)(_170)(_171);
        };
    });
    return {
        Sum: Sum, 
        eqSum: eqSum, 
        monoidSum: monoidSum, 
        ordSum: ordSum, 
        runSum: runSum, 
        semigroupSum: semigroupSum, 
        showSum: showSum
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Extend = PS.Control_Extend;
    var Control_Comonad = PS.Control_Comonad;
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    var zip = Data_Array.zipWith(Tuple.create);
    var unzip = function (_179) {
        if (_179.length >= 1) {
            var _590 = _179.slice(1);
            var _584 = unzip(_590);
            return new Tuple(Prelude[":"]((_179[0]).value0)(_584.value0), Prelude[":"]((_179[0]).value1)(_584.value1));
        };
        if (_179.length === 0) {
            return new Tuple([  ], [  ]);
        };
        throw new Error("Failed pattern match");
    };
    var uncurry = function (_177) {
        return function (_178) {
            return _177(_178.value0)(_178.value1);
        };
    };
    var swap = function (_180) {
        return new Tuple(_180.value1, _180.value0);
    };
    var snd = function (_176) {
        return _176.value1;
    };
    var showTuple = function (__dict_Show_72) {
        return function (__dict_Show_73) {
            return new Prelude.Show(function (_181) {
                return "Tuple (" + (Prelude.show(__dict_Show_72)(_181.value0) + (") (" + (Prelude.show(__dict_Show_73)(_181.value1) + ")")));
            });
        };
    };
    var semigroupoidTuple = new Prelude.Semigroupoid(function (_186) {
        return function (_187) {
            return new Tuple(_187.value0, _186.value1);
        };
    });
    var semigroupTuple = function (__dict_Semigroup_74) {
        return function (__dict_Semigroup_75) {
            return new Prelude.Semigroup(function (_188) {
                return function (_189) {
                    return new Tuple(Prelude["<>"](__dict_Semigroup_74)(_188.value0)(_189.value0), Prelude["<>"](__dict_Semigroup_75)(_188.value1)(_189.value1));
                };
            });
        };
    };
    var monoidTuple = function (__dict_Monoid_78) {
        return function (__dict_Monoid_79) {
            return new Data_Monoid.Monoid(function () {
                return semigroupTuple(__dict_Monoid_78["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_79["__superclass_Prelude.Semigroup_0"]());
            }, new Tuple(Data_Monoid.mempty(__dict_Monoid_78), Data_Monoid.mempty(__dict_Monoid_79)));
        };
    };
    var functorTuple = new Prelude.Functor(function (_190) {
        return function (_191) {
            return new Tuple(_191.value0, _190(_191.value1));
        };
    });
    var fst = function (_175) {
        return _175.value0;
    };
    var lazyLazy1Tuple = function (__dict_Lazy1_81) {
        return function (__dict_Lazy1_82) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer1(__dict_Lazy1_81)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer1(__dict_Lazy1_82)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyLazy2Tuple = function (__dict_Lazy2_83) {
        return function (__dict_Lazy2_84) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer2(__dict_Lazy2_83)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer2(__dict_Lazy2_84)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var lazyTuple = function (__dict_Lazy_85) {
        return function (__dict_Lazy_86) {
            return new Control_Lazy.Lazy(function (f) {
                return new Tuple(Control_Lazy.defer(__dict_Lazy_85)(function (_) {
                    return fst(f(Prelude.unit));
                }), Control_Lazy.defer(__dict_Lazy_86)(function (_) {
                    return snd(f(Prelude.unit));
                }));
            });
        };
    };
    var extendTuple = new Control_Extend.Extend(function (_196) {
        return function (_197) {
            return new Tuple(_197.value0, _196(_197));
        };
    }, function () {
        return functorTuple;
    });
    var eqTuple = function (__dict_Eq_87) {
        return function (__dict_Eq_88) {
            return new Prelude.Eq(function (t1) {
                return function (t2) {
                    return !Prelude["=="](eqTuple(__dict_Eq_87)(__dict_Eq_88))(t1)(t2);
                };
            }, function (_182) {
                return function (_183) {
                    return Prelude["=="](__dict_Eq_87)(_182.value0)(_183.value0) && Prelude["=="](__dict_Eq_88)(_182.value1)(_183.value1);
                };
            });
        };
    };
    var ordTuple = function (__dict_Ord_76) {
        return function (__dict_Ord_77) {
            return new Prelude.Ord(function () {
                return eqTuple(__dict_Ord_76["__superclass_Prelude.Eq_0"]())(__dict_Ord_77["__superclass_Prelude.Eq_0"]());
            }, function (_184) {
                return function (_185) {
                    var _635 = Prelude.compare(__dict_Ord_76)(_184.value0)(_185.value0);
                    if (_635 instanceof Prelude.EQ) {
                        return Prelude.compare(__dict_Ord_77)(_184.value1)(_185.value1);
                    };
                    return _635;
                };
            });
        };
    };
    var curry = function (f) {
        return function (a) {
            return function (b) {
                return f(new Tuple(a, b));
            };
        };
    };
    var comonadTuple = new Control_Comonad.Comonad(function () {
        return extendTuple;
    }, snd);
    var applyTuple = function (__dict_Semigroup_90) {
        return new Prelude.Apply(function (_192) {
            return function (_193) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_90)(_192.value0)(_193.value0), _192.value1(_193.value1));
            };
        }, function () {
            return functorTuple;
        });
    };
    var bindTuple = function (__dict_Semigroup_89) {
        return new Prelude.Bind(function (_194) {
            return function (_195) {
                var _648 = _195(_194.value1);
                return new Tuple(Prelude["<>"](__dict_Semigroup_89)(_194.value0)(_648.value0), _648.value1);
            };
        }, function () {
            return applyTuple(__dict_Semigroup_89);
        });
    };
    var applicativeTuple = function (__dict_Monoid_91) {
        return new Prelude.Applicative(function () {
            return applyTuple(__dict_Monoid_91["__superclass_Prelude.Semigroup_0"]());
        }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_91)));
    };
    var monadTuple = function (__dict_Monoid_80) {
        return new Prelude.Monad(function () {
            return applicativeTuple(__dict_Monoid_80);
        }, function () {
            return bindTuple(__dict_Monoid_80["__superclass_Prelude.Semigroup_0"]());
        });
    };
    return {
        Tuple: Tuple, 
        applicativeTuple: applicativeTuple, 
        applyTuple: applyTuple, 
        bindTuple: bindTuple, 
        comonadTuple: comonadTuple, 
        curry: curry, 
        eqTuple: eqTuple, 
        extendTuple: extendTuple, 
        fst: fst, 
        functorTuple: functorTuple, 
        lazyLazy1Tuple: lazyLazy1Tuple, 
        lazyLazy2Tuple: lazyLazy2Tuple, 
        lazyTuple: lazyTuple, 
        monadTuple: monadTuple, 
        monoidTuple: monoidTuple, 
        ordTuple: ordTuple, 
        semigroupTuple: semigroupTuple, 
        semigroupoidTuple: semigroupoidTuple, 
        showTuple: showTuple, 
        snd: snd, 
        swap: swap, 
        uncurry: uncurry, 
        unzip: unzip, 
        zip: zip
    };
})();
var PS = PS || {};
PS.Data_Tuple_Nested = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Tuple = PS.Data_Tuple;
    var $div$bslash = function (a) {
        return function (b) {
            return new Data_Tuple.Tuple(a, b);
        };
    };
    var con9 = function (f) {
        return function (_205) {
            return f(_205.value0)(_205.value1.value0)(_205.value1.value1.value0)(_205.value1.value1.value1.value0)(_205.value1.value1.value1.value1.value0)(_205.value1.value1.value1.value1.value1.value0)(_205.value1.value1.value1.value1.value1.value1.value0)(_205.value1.value1.value1.value1.value1.value1.value1.value0)(_205.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con8 = function (f) {
        return function (_204) {
            return f(_204.value0)(_204.value1.value0)(_204.value1.value1.value0)(_204.value1.value1.value1.value0)(_204.value1.value1.value1.value1.value0)(_204.value1.value1.value1.value1.value1.value0)(_204.value1.value1.value1.value1.value1.value1.value0)(_204.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    var con7 = function (f) {
        return function (_203) {
            return f(_203.value0)(_203.value1.value0)(_203.value1.value1.value0)(_203.value1.value1.value1.value0)(_203.value1.value1.value1.value1.value0)(_203.value1.value1.value1.value1.value1.value0)(_203.value1.value1.value1.value1.value1.value1);
        };
    };
    var con6 = function (f) {
        return function (_202) {
            return f(_202.value0)(_202.value1.value0)(_202.value1.value1.value0)(_202.value1.value1.value1.value0)(_202.value1.value1.value1.value1.value0)(_202.value1.value1.value1.value1.value1);
        };
    };
    var con5 = function (f) {
        return function (_201) {
            return f(_201.value0)(_201.value1.value0)(_201.value1.value1.value0)(_201.value1.value1.value1.value0)(_201.value1.value1.value1.value1);
        };
    };
    var con4 = function (f) {
        return function (_200) {
            return f(_200.value0)(_200.value1.value0)(_200.value1.value1.value0)(_200.value1.value1.value1);
        };
    };
    var con3 = function (f) {
        return function (_199) {
            return f(_199.value0)(_199.value1.value0)(_199.value1.value1);
        };
    };
    var con2 = function (f) {
        return function (_198) {
            return f(_198.value0)(_198.value1);
        };
    };
    var con10 = function (f) {
        return function (_206) {
            return f(_206.value0)(_206.value1.value0)(_206.value1.value1.value0)(_206.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value1.value1.value1.value1.value0)(_206.value1.value1.value1.value1.value1.value1.value1.value1.value1);
        };
    };
    return {
        "/\\": $div$bslash, 
        con10: con10, 
        con2: con2, 
        con3: con3, 
        con4: con4, 
        con5: con5, 
        con6: con6, 
        con7: con7, 
        con8: con8, 
        con9: con9
    };
})();
var PS = PS || {};
PS.Data_Monoid_First = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var First = {
        create: function (value) {
            return value;
        }
    };
    var showFirst = function (__dict_Show_92) {
        return new Prelude.Show(function (_214) {
            return "First (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_92))(_214) + ")");
        });
    };
    var semigroupFirst = new Prelude.Semigroup(function (_215) {
        return function (_216) {
            if (_215 instanceof Data_Maybe.Just) {
                return _215;
            };
            return _216;
        };
    });
    var runFirst = function (_207) {
        return _207;
    };
    var monoidFirst = new Data_Monoid.Monoid(function () {
        return semigroupFirst;
    }, Data_Maybe.Nothing.value);
    var eqFirst = function (__dict_Eq_94) {
        return new Prelude.Eq(function (_210) {
            return function (_211) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_94))(_210)(_211);
            };
        }, function (_208) {
            return function (_209) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_94))(_208)(_209);
            };
        });
    };
    var ordFirst = function (__dict_Ord_93) {
        return new Prelude.Ord(function () {
            return eqFirst(__dict_Ord_93["__superclass_Prelude.Eq_0"]());
        }, function (_212) {
            return function (_213) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_93))(_212)(_213);
            };
        });
    };
    return {
        First: First, 
        eqFirst: eqFirst, 
        monoidFirst: monoidFirst, 
        ordFirst: ordFirst, 
        runFirst: runFirst, 
        semigroupFirst: semigroupFirst, 
        showFirst: showFirst
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Data_Monoid = PS.Data_Monoid;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    function Foldable(foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    function foldrArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = xs.length - 1; i >= 0; --i) {        acc = f(xs[i])(acc);      }      return acc;    }  }};
    function foldlArray(f) {  return function(z) {    return function(xs) {      var acc = z;      for (var i = 0, len = xs.length; i < len; ++i) {        acc = f(acc)(xs[i]);      }      return acc;    }  }};
    var foldr = function (dict) {
        return dict.foldr;
    };
    var traverse_ = function (__dict_Applicative_95) {
        return function (__dict_Foldable_96) {
            return function (f) {
                return foldr(__dict_Foldable_96)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_95["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_95)(Prelude.unit));
            };
        };
    };
    var for_ = function (__dict_Applicative_97) {
        return function (__dict_Foldable_98) {
            return Prelude.flip(traverse_(__dict_Applicative_97)(__dict_Foldable_98));
        };
    };
    var sequence_ = function (__dict_Applicative_99) {
        return function (__dict_Foldable_100) {
            return traverse_(__dict_Applicative_99)(__dict_Foldable_100)(Prelude.id(Prelude.categoryArr));
        };
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var intercalate = function (__dict_Foldable_101) {
        return function (__dict_Monoid_102) {
            return function (sep) {
                return function (xs) {
                    var go = function (_250) {
                        return function (_251) {
                            if (_250.init) {
                                return {
                                    init: false, 
                                    acc: _251
                                };
                            };
                            return {
                                init: false, 
                                acc: Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(_250.acc)(Prelude["<>"](__dict_Monoid_102["__superclass_Prelude.Semigroup_0"]())(sep)(_251))
                            };
                        };
                    };
                    return (foldl(__dict_Foldable_101)(go)({
                        init: true, 
                        acc: Data_Monoid.mempty(__dict_Monoid_102)
                    })(xs)).acc;
                };
            };
        };
    };
    var mconcat = function (__dict_Foldable_103) {
        return function (__dict_Monoid_104) {
            return foldl(__dict_Foldable_103)(Prelude["<>"](__dict_Monoid_104["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_104));
        };
    };
    var or = function (__dict_Foldable_105) {
        return foldl(__dict_Foldable_105)(Prelude["||"](Prelude.boolLikeBoolean))(false);
    };
    var product = function (__dict_Foldable_106) {
        return foldl(__dict_Foldable_106)(Prelude["*"](Prelude.numNumber))(1);
    };
    var sum = function (__dict_Foldable_107) {
        return foldl(__dict_Foldable_107)(Prelude["+"](Prelude.numNumber))(0);
    };
    var foldableTuple = new Foldable(function (__dict_Monoid_108) {
        return function (_248) {
            return function (_249) {
                return _248(_249.value1);
            };
        };
    }, function (_245) {
        return function (_246) {
            return function (_247) {
                return _245(_246)(_247.value1);
            };
        };
    }, function (_242) {
        return function (_243) {
            return function (_244) {
                return _242(_244.value1)(_243);
            };
        };
    });
    var foldableRef = new Foldable(function (__dict_Monoid_109) {
        return function (_240) {
            return function (_241) {
                return _240(_241);
            };
        };
    }, function (_237) {
        return function (_238) {
            return function (_239) {
                return _237(_238)(_239);
            };
        };
    }, function (_234) {
        return function (_235) {
            return function (_236) {
                return _234(_236)(_235);
            };
        };
    });
    var foldableMaybe = new Foldable(function (__dict_Monoid_110) {
        return function (_232) {
            return function (_233) {
                if (_233 instanceof Data_Maybe.Nothing) {
                    return Data_Monoid.mempty(__dict_Monoid_110);
                };
                if (_233 instanceof Data_Maybe.Just) {
                    return _232(_233.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_229) {
        return function (_230) {
            return function (_231) {
                if (_231 instanceof Data_Maybe.Nothing) {
                    return _230;
                };
                if (_231 instanceof Data_Maybe.Just) {
                    return _229(_230)(_231.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_226) {
        return function (_227) {
            return function (_228) {
                if (_228 instanceof Data_Maybe.Nothing) {
                    return _227;
                };
                if (_228 instanceof Data_Maybe.Just) {
                    return _226(_228.value0)(_227);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableEither = new Foldable(function (__dict_Monoid_111) {
        return function (_224) {
            return function (_225) {
                if (_225 instanceof Data_Either.Left) {
                    return Data_Monoid.mempty(__dict_Monoid_111);
                };
                if (_225 instanceof Data_Either.Right) {
                    return _224(_225.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_221) {
        return function (_222) {
            return function (_223) {
                if (_223 instanceof Data_Either.Left) {
                    return _222;
                };
                if (_223 instanceof Data_Either.Right) {
                    return _221(_222)(_223.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    }, function (_218) {
        return function (_219) {
            return function (_220) {
                if (_220 instanceof Data_Either.Left) {
                    return _219;
                };
                if (_220 instanceof Data_Either.Right) {
                    return _218(_220.value0)(_219);
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var foldableArray = new Foldable(function (__dict_Monoid_112) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_112["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_112))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    var lookup = function (__dict_Eq_113) {
        return function (__dict_Foldable_114) {
            return function (a) {
                return function (f) {
                    return Data_Monoid_First.runFirst(foldMap(__dict_Foldable_114)(Data_Monoid_First.monoidFirst)(function (_217) {
                        return Prelude["=="](__dict_Eq_113)(a)(_217.value0) ? new Data_Maybe.Just(_217.value1) : Data_Maybe.Nothing.value;
                    })(f));
                };
            };
        };
    };
    var fold = function (__dict_Foldable_115) {
        return function (__dict_Monoid_116) {
            return foldMap(__dict_Foldable_115)(__dict_Monoid_116)(Prelude.id(Prelude.categoryArr));
        };
    };
    var find = function (__dict_Foldable_117) {
        return function (p) {
            return function (f) {
                var _817 = foldMap(__dict_Foldable_117)(Data_Monoid.monoidArray)(function (x) {
                    return p(x) ? [ x ] : [  ];
                })(f);
                if (_817.length >= 1) {
                    var _819 = _817.slice(1);
                    return new Data_Maybe.Just(_817[0]);
                };
                if (_817.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var any = function (__dict_Foldable_118) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(or(foldableArray))(foldMap(__dict_Foldable_118)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    var elem = function (__dict_Eq_119) {
        return function (__dict_Foldable_120) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(any(__dict_Foldable_120))(Prelude["=="](__dict_Eq_119));
        };
    };
    var notElem = function (__dict_Eq_121) {
        return function (__dict_Foldable_122) {
            return function (x) {
                return Prelude["<<<"](Prelude.semigroupoidArr)(Prelude.not(Prelude.boolLikeBoolean))(elem(__dict_Eq_121)(__dict_Foldable_122)(x));
            };
        };
    };
    var and = function (__dict_Foldable_123) {
        return foldl(__dict_Foldable_123)(Prelude["&&"](Prelude.boolLikeBoolean))(true);
    };
    var all = function (__dict_Foldable_124) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidArr)(and(foldableArray))(foldMap(__dict_Foldable_124)(Data_Monoid.monoidArray)(function (x) {
                return [ p(x) ];
            }));
        };
    };
    return {
        Foldable: Foldable, 
        all: all, 
        and: and, 
        any: any, 
        elem: elem, 
        find: find, 
        fold: fold, 
        foldMap: foldMap, 
        foldableArray: foldableArray, 
        foldableEither: foldableEither, 
        foldableMaybe: foldableMaybe, 
        foldableRef: foldableRef, 
        foldableTuple: foldableTuple, 
        foldl: foldl, 
        foldlArray: foldlArray, 
        foldr: foldr, 
        foldrArray: foldrArray, 
        for_: for_, 
        intercalate: intercalate, 
        lookup: lookup, 
        mconcat: mconcat, 
        notElem: notElem, 
        or: or, 
        product: product, 
        sequence_: sequence_, 
        sum: sum, 
        traverse_: traverse_
    };
})();
var PS = PS || {};
PS.Data_Monoid_Last = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Last = {
        create: function (value) {
            return value;
        }
    };
    var showLast = function (__dict_Show_125) {
        return new Prelude.Show(function (_259) {
            return "Last (" + (Prelude.show(Data_Maybe.showMaybe(__dict_Show_125))(_259) + ")");
        });
    };
    var semigroupLast = new Prelude.Semigroup(function (_260) {
        return function (_261) {
            if (_261 instanceof Data_Maybe.Just) {
                return _261;
            };
            if (_261 instanceof Data_Maybe.Nothing) {
                return _260;
            };
            throw new Error("Failed pattern match");
        };
    });
    var runLast = function (_252) {
        return _252;
    };
    var monoidLast = new Data_Monoid.Monoid(function () {
        return semigroupLast;
    }, Data_Maybe.Nothing.value);
    var eqLast = function (__dict_Eq_127) {
        return new Prelude.Eq(function (_255) {
            return function (_256) {
                return Prelude["/="](Data_Maybe.eqMaybe(__dict_Eq_127))(_255)(_256);
            };
        }, function (_253) {
            return function (_254) {
                return Prelude["=="](Data_Maybe.eqMaybe(__dict_Eq_127))(_253)(_254);
            };
        });
    };
    var ordLast = function (__dict_Ord_126) {
        return new Prelude.Ord(function () {
            return eqLast(__dict_Ord_126["__superclass_Prelude.Eq_0"]());
        }, function (_257) {
            return function (_258) {
                return Prelude.compare(Data_Maybe.ordMaybe(__dict_Ord_126))(_257)(_258);
            };
        });
    };
    return {
        Last: Last, 
        eqLast: eqLast, 
        monoidLast: monoidLast, 
        ordLast: ordLast, 
        runLast: runLast, 
        semigroupLast: semigroupLast, 
        showLast: showLast
    };
})();
var PS = PS || {};
PS.Data_StrMap_ST = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function _new() {
    return {};
  }
  ;
    
  function peek(m) {
    return function(k) {
      return function() {
        return m[k];
      }
    }
  }
  ;
    
  function poke(m) {
    return function(k) {
      return function(v) {
        return function() {
          m[k] = v;
          return m;
        };
      };
    };
  }
  ;
    
  function _delete(m) {
    return function(k) {
      return function() {
        delete m[k];
        return m;
      };
    };
  }
  ;
    var $$new = _new;
    var $$delete = _delete;
    return {
        "delete": $$delete, 
        "new": $$new, 
        peek: peek, 
        poke: poke
    };
})();
var PS = PS || {};
PS.Data_String = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Data_Char = PS.Data_Char;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
    function _charAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charAt(i)) : Nothing;
    }
    ;
    
    function _charCodeAt(i, s, Just, Nothing) {
      return i >= 0 && i < s.length ? Just(s.charCodeAt(i)) : Nothing;
    }
    ;
    
    function fromCharArray(a) {
      return a.join('');
    }
    ;
    
    function indexOf(x) {
      return function(s) {
        return s.indexOf(x);
      };
    }
    ;
    
    function indexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.indexOf(x, startAt);
        };
      };
    }
    ;
    
    function lastIndexOf(x) {
      return function(s) {
        return s.lastIndexOf(x);
      };
    }
    ;
    
    function lastIndexOf$prime(x) {
      return function(startAt) {
        return function(s) {
          return s.lastIndexOf(x, startAt);
        };
      };
    }
    ;
    
    function length(s) {
      return s.length;
    }
    ;
    
    function localeCompare(s1) {
      return function(s2) {
        return s1.localeCompare(s2);
      };
    }
    ;
    
    function replace(s1) {
      return function(s2) {
        return function(s3) {
          return s3.replace(s1, s2);
        };
      };
    }
    ;
    
    function take(n) {
      return function(s) {
        return s.substr(0, n);
      };
    }
    ;
    
    function drop(n) {
      return function(s) {
        return s.substr(n);
      };
    }
    ;
    
    function split(sep) {
      return function(s) {
        return s.split(sep);
      };
    }
    ;
    
    function toCharArray(s) {
      return s.split('');
    }
    ;
    
    function toLower(s) {
      return s.toLowerCase();
    }
    ;
    
    function toUpper(s) {
      return s.toUpperCase();
    }
    ;
    
    function trim(s) {
      return s.trim();
    }
    ;
    
    function joinWith(s) {
      return function(xs) {
        return xs.join(s);
      };
    }
    ;
    var fromChar = Data_Char.charString;
    var charCodeAt = function (n) {
        return function (s) {
            return _charCodeAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    var charAt = function (n) {
        return function (s) {
            return _charAt(n, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        charAt: charAt, 
        charCodeAt: charCodeAt, 
        drop: drop, 
        fromChar: fromChar, 
        fromCharArray: fromCharArray, 
        indexOf: indexOf, 
        "indexOf'": indexOf$prime, 
        joinWith: joinWith, 
        lastIndexOf: lastIndexOf, 
        "lastIndexOf'": lastIndexOf$prime, 
        length: length, 
        localeCompare: localeCompare, 
        replace: replace, 
        split: split, 
        take: take, 
        toCharArray: toCharArray, 
        toLower: toLower, 
        toUpper: toUpper, 
        trim: trim
    };
})();
var PS = PS || {};
PS.Data_String_Regex = (function () {
    "use strict";
    var Data_String = PS.Data_String;
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
  function showRegex$prime(r) {
    return '' + r;
  }
  ;
    
  function regex$prime(s1) {
    return function(s2) {
      return new RegExp(s1, s2);
    };
  }
  ;
    
  function source(r) {
    return r.source;
  }
  ;
    
  function flags(r) {
    return {
      multiline: r.multiline,
      ignoreCase: r.ignoreCase,
      global: r.global,
      sticky: !!r.sticky,
      unicode: !!r.unicode
    };
  }
  ;
    
  function test(r) {
    return function(s) {
      return r.test(s);
    };
  }
  ;
    
  function _match(r, s, Just, Nothing) {
    var m = s.match(r);
    return m == null ? Nothing : Just(m);
  }
  ;
    
  function replace(r) {
    return function(s1) {
      return function(s2) {
        return s2.replace(r, s1);
      };
    };
  }
  ;
    
  function replace$prime(r) {
    return function(f) {
      return function(s2) {
        return s2.replace(r, function(match) {
          return f(match)(Array.prototype.splice.call(arguments, 1, arguments.length - 3));
        });
      };
    };
  }
  ;
    
  function search(r) {
    return function(s) {
      return s.search(r);
    };
  }
  ;
    
  function split(r) {
    return function(s) {
      return s.split(r);
    };
  }
  ;
    var showRegex = new Prelude.Show(showRegex$prime);
    var renderFlags = function (flags_1) {
        return (flags_1.global ? "g" : "") + ((flags_1.ignoreCase ? "i" : "") + ((flags_1.multiline ? "m" : "") + ((flags_1.sticky ? "y" : "") + (flags_1.unicode ? "u" : ""))));
    };
    var regex = function (source_1) {
        return function (flags_1) {
            return regex$prime(source_1)(renderFlags(flags_1));
        };
    };
    var parseFlags = function (s) {
        return {
            global: Data_String.indexOf("g")(s) >= 0, 
            ignoreCase: Data_String.indexOf("i")(s) >= 0, 
            multiline: Data_String.indexOf("m")(s) >= 0, 
            sticky: Data_String.indexOf("y")(s) >= 0, 
            unicode: Data_String.indexOf("u")(s) >= 0
        };
    };
    var match = function (r) {
        return function (s) {
            return _match(r, s, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
        };
    };
    return {
        flags: flags, 
        match: match, 
        parseFlags: parseFlags, 
        regex: regex, 
        renderFlags: renderFlags, 
        replace: replace, 
        "replace'": replace$prime, 
        search: search, 
        showRegex: showRegex, 
        source: source, 
        split: split, 
        test: test
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Eq = PS.Data_Eq;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Either = PS.Data_Either;
    function Traversable(__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    var traverse = function (dict) {
        return dict.traverse;
    };
    var traversableTuple = new Traversable(function () {
        return Data_Foldable.foldableTuple;
    }, function () {
        return Data_Tuple.functorTuple;
    }, function (__dict_Applicative_129) {
        return function (_276) {
            return Prelude["<$>"]((__dict_Applicative_129["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_276.value0))(_276.value1);
        };
    }, function (__dict_Applicative_128) {
        return function (_274) {
            return function (_275) {
                return Prelude["<$>"]((__dict_Applicative_128["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.Tuple.create(_275.value0))(_274(_275.value1));
            };
        };
    });
    var traversableRef = new Traversable(function () {
        return Data_Foldable.foldableRef;
    }, function () {
        return Data_Eq.functorRef;
    }, function (__dict_Applicative_131) {
        return function (_270) {
            return Prelude["<$>"]((__dict_Applicative_131["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_270);
        };
    }, function (__dict_Applicative_130) {
        return function (_268) {
            return function (_269) {
                return Prelude["<$>"]((__dict_Applicative_130["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Eq.Ref.create)(_268(_269));
            };
        };
    });
    var traversableMaybe = new Traversable(function () {
        return Data_Foldable.foldableMaybe;
    }, function () {
        return Data_Maybe.functorMaybe;
    }, function (__dict_Applicative_133) {
        return function (_273) {
            if (_273 instanceof Data_Maybe.Nothing) {
                return Prelude.pure(__dict_Applicative_133)(Data_Maybe.Nothing.value);
            };
            if (_273 instanceof Data_Maybe.Just) {
                return Prelude["<$>"]((__dict_Applicative_133["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_273.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_132) {
        return function (_271) {
            return function (_272) {
                if (_272 instanceof Data_Maybe.Nothing) {
                    return Prelude.pure(__dict_Applicative_132)(Data_Maybe.Nothing.value);
                };
                if (_272 instanceof Data_Maybe.Just) {
                    return Prelude["<$>"]((__dict_Applicative_132["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Maybe.Just.create)(_271(_272.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var traversableEither = new Traversable(function () {
        return Data_Foldable.foldableEither;
    }, function () {
        return Data_Either.functorEither;
    }, function (__dict_Applicative_135) {
        return function (_267) {
            if (_267 instanceof Data_Either.Left) {
                return Prelude.pure(__dict_Applicative_135)(new Data_Either.Left(_267.value0));
            };
            if (_267 instanceof Data_Either.Right) {
                return Prelude["<$>"]((__dict_Applicative_135["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_267.value0);
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_134) {
        return function (_265) {
            return function (_266) {
                if (_266 instanceof Data_Either.Left) {
                    return Prelude.pure(__dict_Applicative_134)(new Data_Either.Left(_266.value0));
                };
                if (_266 instanceof Data_Either.Right) {
                    return Prelude["<$>"]((__dict_Applicative_134["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Either.Right.create)(_265(_266.value0));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_137) {
        return function (_264) {
            if (_264.length === 0) {
                return Prelude.pure(__dict_Applicative_137)([  ]);
            };
            if (_264.length >= 1) {
                var _855 = _264.slice(1);
                return Prelude["<*>"](__dict_Applicative_137["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_137["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_264[0]))(sequence(traversableArray)(__dict_Applicative_137)(_855));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_136) {
        return function (_262) {
            return function (_263) {
                if (_263.length === 0) {
                    return Prelude.pure(__dict_Applicative_136)([  ]);
                };
                if (_263.length >= 1) {
                    var _859 = _263.slice(1);
                    return Prelude["<*>"](__dict_Applicative_136["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_136["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_262(_263[0])))(traverse(traversableArray)(__dict_Applicative_136)(_262)(_859));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    var zipWithA = function (__dict_Applicative_138) {
        return function (f) {
            return function (xs) {
                return function (ys) {
                    return sequence(traversableArray)(__dict_Applicative_138)(Data_Array.zipWith(f)(xs)(ys));
                };
            };
        };
    };
    var $$for = function (__dict_Applicative_139) {
        return function (__dict_Traversable_140) {
            return function (x) {
                return function (f) {
                    return traverse(__dict_Traversable_140)(__dict_Applicative_139)(f)(x);
                };
            };
        };
    };
    return {
        Traversable: Traversable, 
        "for": $$for, 
        sequence: sequence, 
        traversableArray: traversableArray, 
        traversableEither: traversableEither, 
        traversableMaybe: traversableMaybe, 
        traversableRef: traversableRef, 
        traversableTuple: traversableTuple, 
        traverse: traverse, 
        zipWithA: zipWithA
    };
})();
var PS = PS || {};
PS.Data_Map = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    function Leaf() {

    };
    Leaf.value = new Leaf();
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    var values = function (_287) {
        if (_287 instanceof Leaf) {
            return [  ];
        };
        if (_287 instanceof Two) {
            return Prelude["++"](Data_Array.semigroupArray)(values(_287.value0))(Prelude["++"](Data_Array.semigroupArray)([ _287.value2 ])(values(_287.value3)));
        };
        if (_287 instanceof Three) {
            return Prelude["++"](Data_Array.semigroupArray)(values(_287.value0))(Prelude["++"](Data_Array.semigroupArray)([ _287.value2 ])(Prelude["++"](Data_Array.semigroupArray)(values(_287.value3))(Prelude["++"](Data_Array.semigroupArray)([ _287.value5 ])(values(_287.value6)))));
        };
        throw new Error("Failed pattern match");
    };
    var toList = function (_285) {
        if (_285 instanceof Leaf) {
            return [  ];
        };
        if (_285 instanceof Two) {
            return Prelude["++"](Data_Array.semigroupArray)(toList(_285.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_285.value1, _285.value2) ])(toList(_285.value3)));
        };
        if (_285 instanceof Three) {
            return Prelude["++"](Data_Array.semigroupArray)(toList(_285.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_285.value1, _285.value2) ])(Prelude["++"](Data_Array.semigroupArray)(toList(_285.value3))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_285.value4, _285.value5) ])(toList(_285.value6)))));
        };
        throw new Error("Failed pattern match");
    };
    var singleton = function (k) {
        return function (v) {
            return new Two(Leaf.value, k, v, Leaf.value);
        };
    };
    var showTree = function (__dict_Show_141) {
        return function (__dict_Show_142) {
            return function (_279) {
                if (_279 instanceof Leaf) {
                    return "Leaf";
                };
                if (_279 instanceof Two) {
                    return "Two (" + (showTree(__dict_Show_141)(__dict_Show_142)(_279.value0) + (") (" + (Prelude.show(__dict_Show_141)(_279.value1) + (") (" + (Prelude.show(__dict_Show_142)(_279.value2) + (") (" + (showTree(__dict_Show_141)(__dict_Show_142)(_279.value3) + ")")))))));
                };
                if (_279 instanceof Three) {
                    return "Three (" + (showTree(__dict_Show_141)(__dict_Show_142)(_279.value0) + (") (" + (Prelude.show(__dict_Show_141)(_279.value1) + (") (" + (Prelude.show(__dict_Show_142)(_279.value2) + (") (" + (showTree(__dict_Show_141)(__dict_Show_142)(_279.value3) + (") (" + (Prelude.show(__dict_Show_141)(_279.value4) + (") (" + (Prelude.show(__dict_Show_142)(_279.value5) + (") (" + (showTree(__dict_Show_141)(__dict_Show_142)(_279.value6) + ")")))))))))))));
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var showMap = function (__dict_Show_143) {
        return function (__dict_Show_144) {
            return new Prelude.Show(function (m) {
                return "fromList " + Prelude.show(Prelude.showArray(Data_Tuple.showTuple(__dict_Show_143)(__dict_Show_144)))(toList(m));
            });
        };
    };
    var lookup = function (__copy___dict_Ord_145) {
        return function (__copy__281) {
            return function (__copy__282) {
                var __dict_Ord_145 = __copy___dict_Ord_145;
                var _281 = __copy__281;
                var _282 = __copy__282;
                tco: while (true) {
                    if (_282 instanceof Leaf) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (_282 instanceof Two && Prelude["=="](__dict_Ord_145["__superclass_Prelude.Eq_0"]())(_281)(_282.value1)) {
                        return new Data_Maybe.Just(_282.value2);
                    };
                    if (_282 instanceof Two && Prelude["<"](__dict_Ord_145)(_281)(_282.value1)) {
                        var __tco___dict_Ord_145 = __dict_Ord_145;
                        var __tco__281 = _281;
                        var __tco__282 = _282.value0;
                        __dict_Ord_145 = __tco___dict_Ord_145;
                        _281 = __tco__281;
                        _282 = __tco__282;
                        continue tco;
                    };
                    if (_282 instanceof Two) {
                        var __tco___dict_Ord_145 = __dict_Ord_145;
                        var __tco__281 = _281;
                        var __tco__282 = _282.value3;
                        __dict_Ord_145 = __tco___dict_Ord_145;
                        _281 = __tco__281;
                        _282 = __tco__282;
                        continue tco;
                    };
                    if (_282 instanceof Three && Prelude["=="](__dict_Ord_145["__superclass_Prelude.Eq_0"]())(_281)(_282.value1)) {
                        return new Data_Maybe.Just(_282.value2);
                    };
                    if (_282 instanceof Three && Prelude["=="](__dict_Ord_145["__superclass_Prelude.Eq_0"]())(_281)(_282.value4)) {
                        return new Data_Maybe.Just(_282.value5);
                    };
                    if (_282 instanceof Three && Prelude["<"](__dict_Ord_145)(_281)(_282.value1)) {
                        var __tco___dict_Ord_145 = __dict_Ord_145;
                        var __tco__281 = _281;
                        var __tco__282 = _282.value0;
                        __dict_Ord_145 = __tco___dict_Ord_145;
                        _281 = __tco__281;
                        _282 = __tco__282;
                        continue tco;
                    };
                    if (_282 instanceof Three && (Prelude["<"](__dict_Ord_145)(_282.value1)(_281) && Prelude["<="](__dict_Ord_145)(_281)(_282.value4))) {
                        var __tco___dict_Ord_145 = __dict_Ord_145;
                        var __tco__281 = _281;
                        var __tco__282 = _282.value3;
                        __dict_Ord_145 = __tco___dict_Ord_145;
                        _281 = __tco__281;
                        _282 = __tco__282;
                        continue tco;
                    };
                    if (_282 instanceof Three) {
                        var __tco___dict_Ord_145 = __dict_Ord_145;
                        var __tco__281 = _281;
                        var __tco__282 = _282.value6;
                        __dict_Ord_145 = __tco___dict_Ord_145;
                        _281 = __tco__281;
                        _282 = __tco__282;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var member = function (__dict_Ord_146) {
        return function (k) {
            return function (m) {
                return Data_Maybe.isJust(lookup(__dict_Ord_146)(k)(m));
            };
        };
    };
    var keys = function (_286) {
        if (_286 instanceof Leaf) {
            return [  ];
        };
        if (_286 instanceof Two) {
            return Prelude["++"](Data_Array.semigroupArray)(keys(_286.value0))(Prelude["++"](Data_Array.semigroupArray)([ _286.value1 ])(keys(_286.value3)));
        };
        if (_286 instanceof Three) {
            return Prelude["++"](Data_Array.semigroupArray)(keys(_286.value0))(Prelude["++"](Data_Array.semigroupArray)([ _286.value1 ])(Prelude["++"](Data_Array.semigroupArray)(keys(_286.value3))(Prelude["++"](Data_Array.semigroupArray)([ _286.value4 ])(keys(_286.value6)))));
        };
        throw new Error("Failed pattern match");
    };
    var isEmpty = function (_280) {
        if (_280 instanceof Leaf) {
            return true;
        };
        return false;
    };
    var functorMap = new Prelude.Functor(function (_288) {
        return function (_289) {
            if (_289 instanceof Leaf) {
                return Leaf.value;
            };
            if (_289 instanceof Two) {
                return new Two(Prelude["<$>"](functorMap)(_288)(_289.value0), _289.value1, _288(_289.value2), Prelude["<$>"](functorMap)(_288)(_289.value3));
            };
            if (_289 instanceof Three) {
                return new Three(Prelude["<$>"](functorMap)(_288)(_289.value0), _289.value1, _288(_289.value2), Prelude["<$>"](functorMap)(_288)(_289.value3), _289.value4, _288(_289.value5), Prelude["<$>"](functorMap)(_288)(_289.value6));
            };
            throw new Error("Failed pattern match");
        };
    });
    var map = Prelude["<$>"](functorMap);
    var fromZipper = function (__copy___dict_Ord_147) {
        return function (__copy__283) {
            return function (__copy__284) {
                var __dict_Ord_147 = __copy___dict_Ord_147;
                var _283 = __copy__283;
                var _284 = __copy__284;
                tco: while (true) {
                    if (_283.length === 0) {
                        return _284;
                    };
                    if (_283.length >= 1) {
                        var _977 = _283.slice(1);
                        if (_283[0] instanceof TwoLeft) {
                            var __tco___dict_Ord_147 = __dict_Ord_147;
                            var __tco__284 = new Two(_284, (_283[0]).value0, (_283[0]).value1, (_283[0]).value2);
                            __dict_Ord_147 = __tco___dict_Ord_147;
                            _283 = _977;
                            _284 = __tco__284;
                            continue tco;
                        };
                    };
                    if (_283.length >= 1) {
                        var _982 = _283.slice(1);
                        if (_283[0] instanceof TwoRight) {
                            var __tco___dict_Ord_147 = __dict_Ord_147;
                            var __tco__284 = new Two((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, _284);
                            __dict_Ord_147 = __tco___dict_Ord_147;
                            _283 = _982;
                            _284 = __tco__284;
                            continue tco;
                        };
                    };
                    if (_283.length >= 1) {
                        var _990 = _283.slice(1);
                        if (_283[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_147 = __dict_Ord_147;
                            var __tco__284 = new Three(_284, (_283[0]).value0, (_283[0]).value1, (_283[0]).value2, (_283[0]).value3, (_283[0]).value4, (_283[0]).value5);
                            __dict_Ord_147 = __tco___dict_Ord_147;
                            _283 = _990;
                            _284 = __tco__284;
                            continue tco;
                        };
                    };
                    if (_283.length >= 1) {
                        var _998 = _283.slice(1);
                        if (_283[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_147 = __dict_Ord_147;
                            var __tco__284 = new Three((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, _284, (_283[0]).value3, (_283[0]).value4, (_283[0]).value5);
                            __dict_Ord_147 = __tco___dict_Ord_147;
                            _283 = _998;
                            _284 = __tco__284;
                            continue tco;
                        };
                    };
                    if (_283.length >= 1) {
                        var _1006 = _283.slice(1);
                        if (_283[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_147 = __dict_Ord_147;
                            var __tco__284 = new Three((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, (_283[0]).value3, (_283[0]).value4, (_283[0]).value5, _284);
                            __dict_Ord_147 = __tco___dict_Ord_147;
                            _283 = _1006;
                            _284 = __tco__284;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var insert = function (__dict_Ord_148) {
        var up = function (__copy___dict_Ord_149) {
            return function (__copy__295) {
                return function (__copy__296) {
                    var __dict_Ord_149 = __copy___dict_Ord_149;
                    var _295 = __copy__295;
                    var _296 = __copy__296;
                    tco: while (true) {
                        if (_295.length === 0) {
                            return new Two(_296.value0, _296.value1, _296.value2, _296.value3);
                        };
                        if (_295.length >= 1) {
                            var _1021 = _295.slice(1);
                            if (_295[0] instanceof TwoLeft) {
                                return fromZipper(__dict_Ord_149)(_1021)(new Three(_296.value0, _296.value1, _296.value2, _296.value3, (_295[0]).value0, (_295[0]).value1, (_295[0]).value2));
                            };
                        };
                        if (_295.length >= 1) {
                            var _1030 = _295.slice(1);
                            if (_295[0] instanceof TwoRight) {
                                return fromZipper(__dict_Ord_149)(_1030)(new Three((_295[0]).value0, (_295[0]).value1, (_295[0]).value2, _296.value0, _296.value1, _296.value2, _296.value3));
                            };
                        };
                        if (_295.length >= 1) {
                            var _1042 = _295.slice(1);
                            if (_295[0] instanceof ThreeLeft) {
                                var __tco___dict_Ord_149 = __dict_Ord_149;
                                var __tco__296 = new KickUp(new Two(_296.value0, _296.value1, _296.value2, _296.value3), (_295[0]).value0, (_295[0]).value1, new Two((_295[0]).value2, (_295[0]).value3, (_295[0]).value4, (_295[0]).value5));
                                __dict_Ord_149 = __tco___dict_Ord_149;
                                _295 = _1042;
                                _296 = __tco__296;
                                continue tco;
                            };
                        };
                        if (_295.length >= 1) {
                            var _1054 = _295.slice(1);
                            if (_295[0] instanceof ThreeMiddle) {
                                var __tco___dict_Ord_149 = __dict_Ord_149;
                                var __tco__296 = new KickUp(new Two((_295[0]).value0, (_295[0]).value1, (_295[0]).value2, _296.value0), _296.value1, _296.value2, new Two(_296.value3, (_295[0]).value3, (_295[0]).value4, (_295[0]).value5));
                                __dict_Ord_149 = __tco___dict_Ord_149;
                                _295 = _1054;
                                _296 = __tco__296;
                                continue tco;
                            };
                        };
                        if (_295.length >= 1) {
                            var _1066 = _295.slice(1);
                            if (_295[0] instanceof ThreeRight) {
                                var __tco___dict_Ord_149 = __dict_Ord_149;
                                var __tco__296 = new KickUp(new Two((_295[0]).value0, (_295[0]).value1, (_295[0]).value2, (_295[0]).value3), (_295[0]).value4, (_295[0]).value5, new Two(_296.value0, _296.value1, _296.value2, _296.value3));
                                __dict_Ord_149 = __tco___dict_Ord_149;
                                _295 = _1066;
                                _296 = __tco__296;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var down = function (__copy___dict_Ord_150) {
            return function (__copy__291) {
                return function (__copy__292) {
                    return function (__copy__293) {
                        return function (__copy__294) {
                            var __dict_Ord_150 = __copy___dict_Ord_150;
                            var _291 = __copy__291;
                            var _292 = __copy__292;
                            var _293 = __copy__293;
                            var _294 = __copy__294;
                            tco: while (true) {
                                if (_294 instanceof Leaf) {
                                    return up(__dict_Ord_150)(_291)(new KickUp(Leaf.value, _292, _293, Leaf.value));
                                };
                                if (_294 instanceof Two && Prelude["=="](__dict_Ord_150["__superclass_Prelude.Eq_0"]())(_292)(_294.value1)) {
                                    return fromZipper(__dict_Ord_150)(_291)(new Two(_294.value0, _292, _293, _294.value3));
                                };
                                if (_294 instanceof Two && Prelude["<"](__dict_Ord_150)(_292)(_294.value1)) {
                                    var __tco___dict_Ord_150 = __dict_Ord_150;
                                    var __tco__291 = Prelude[":"](new TwoLeft(_294.value1, _294.value2, _294.value3))(_291);
                                    var __tco__292 = _292;
                                    var __tco__293 = _293;
                                    var __tco__294 = _294.value0;
                                    __dict_Ord_150 = __tco___dict_Ord_150;
                                    _291 = __tco__291;
                                    _292 = __tco__292;
                                    _293 = __tco__293;
                                    _294 = __tco__294;
                                    continue tco;
                                };
                                if (_294 instanceof Two) {
                                    var __tco___dict_Ord_150 = __dict_Ord_150;
                                    var __tco__291 = Prelude[":"](new TwoRight(_294.value0, _294.value1, _294.value2))(_291);
                                    var __tco__292 = _292;
                                    var __tco__293 = _293;
                                    var __tco__294 = _294.value3;
                                    __dict_Ord_150 = __tco___dict_Ord_150;
                                    _291 = __tco__291;
                                    _292 = __tco__292;
                                    _293 = __tco__293;
                                    _294 = __tco__294;
                                    continue tco;
                                };
                                if (_294 instanceof Three && Prelude["=="](__dict_Ord_150["__superclass_Prelude.Eq_0"]())(_292)(_294.value1)) {
                                    return fromZipper(__dict_Ord_150)(_291)(new Three(_294.value0, _292, _293, _294.value3, _294.value4, _294.value5, _294.value6));
                                };
                                if (_294 instanceof Three && Prelude["=="](__dict_Ord_150["__superclass_Prelude.Eq_0"]())(_292)(_294.value4)) {
                                    return fromZipper(__dict_Ord_150)(_291)(new Three(_294.value0, _294.value1, _294.value2, _294.value3, _292, _293, _294.value6));
                                };
                                if (_294 instanceof Three && Prelude["<"](__dict_Ord_150)(_292)(_294.value1)) {
                                    var __tco___dict_Ord_150 = __dict_Ord_150;
                                    var __tco__291 = Prelude[":"](new ThreeLeft(_294.value1, _294.value2, _294.value3, _294.value4, _294.value5, _294.value6))(_291);
                                    var __tco__292 = _292;
                                    var __tco__293 = _293;
                                    var __tco__294 = _294.value0;
                                    __dict_Ord_150 = __tco___dict_Ord_150;
                                    _291 = __tco__291;
                                    _292 = __tco__292;
                                    _293 = __tco__293;
                                    _294 = __tco__294;
                                    continue tco;
                                };
                                if (_294 instanceof Three && (Prelude["<"](__dict_Ord_150)(_294.value1)(_292) && Prelude["<="](__dict_Ord_150)(_292)(_294.value4))) {
                                    var __tco___dict_Ord_150 = __dict_Ord_150;
                                    var __tco__291 = Prelude[":"](new ThreeMiddle(_294.value0, _294.value1, _294.value2, _294.value4, _294.value5, _294.value6))(_291);
                                    var __tco__292 = _292;
                                    var __tco__293 = _293;
                                    var __tco__294 = _294.value3;
                                    __dict_Ord_150 = __tco___dict_Ord_150;
                                    _291 = __tco__291;
                                    _292 = __tco__292;
                                    _293 = __tco__293;
                                    _294 = __tco__294;
                                    continue tco;
                                };
                                if (_294 instanceof Three) {
                                    var __tco___dict_Ord_150 = __dict_Ord_150;
                                    var __tco__291 = Prelude[":"](new ThreeRight(_294.value0, _294.value1, _294.value2, _294.value3, _294.value4, _294.value5))(_291);
                                    var __tco__292 = _292;
                                    var __tco__293 = _293;
                                    var __tco__294 = _294.value6;
                                    __dict_Ord_150 = __tco___dict_Ord_150;
                                    _291 = __tco__291;
                                    _292 = __tco__292;
                                    _293 = __tco__293;
                                    _294 = __tco__294;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_148)([  ]);
    };
    var union = function (__dict_Ord_151) {
        return function (m1) {
            return function (m2) {
                return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
                    return function (_278) {
                        return insert(__dict_Ord_151)(_278.value0)(_278.value1)(m);
                    };
                })(m2)(toList(m1));
            };
        };
    };
    var foldableMap = new Data_Foldable.Foldable(function (__dict_Monoid_152) {
        return function (f) {
            return function (m) {
                return Data_Foldable.foldMap(Data_Foldable.foldableArray)(__dict_Monoid_152)(f)(values(m));
            };
        };
    }, function (f) {
        return function (z) {
            return function (m) {
                return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(z)(values(m));
            };
        };
    }, function (f) {
        return function (z) {
            return function (m) {
                return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
            };
        };
    });
    var eqMap = function (__dict_Eq_153) {
        return function (__dict_Eq_154) {
            return new Prelude.Eq(function (m1) {
                return function (m2) {
                    return !Prelude["=="](eqMap(__dict_Eq_153)(__dict_Eq_154))(m1)(m2);
                };
            }, function (m1) {
                return function (m2) {
                    return Prelude["=="](Prelude.eqArray(Data_Tuple.eqTuple(__dict_Eq_153)(__dict_Eq_154)))(toList(m1))(toList(m2));
                };
            });
        };
    };
    var empty = Leaf.value;
    var fromList = function (__dict_Ord_155) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (_277) {
                return insert(__dict_Ord_155)(_277.value0)(_277.value1)(m);
            };
        })(empty);
    };
    var traversableMap = function (__dict_Ord_156) {
        return new Data_Traversable.Traversable(function () {
            return foldableMap;
        }, function () {
            return functorMap;
        }, function (__dict_Applicative_158) {
            return Data_Traversable.traverse(traversableMap(__dict_Ord_156))(__dict_Applicative_158)(Prelude.id(Prelude.categoryArr));
        }, function (__dict_Applicative_157) {
            return function (f) {
                return function (ms) {
                    return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
                        return function (acc) {
                            return Prelude["<*>"](__dict_Applicative_157["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_157["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union(__dict_Ord_156))(x))(acc);
                        };
                    })(Prelude.pure(__dict_Applicative_157)(empty))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"]((__dict_Applicative_157["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_Array.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(__dict_Applicative_157)(f))(toList(ms))));
                };
            };
        });
    };
    var unions = function (__dict_Ord_159) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(union(__dict_Ord_159))(empty);
    };
    var $$delete = function (__dict_Ord_160) {
        var up = function (__copy___dict_Ord_161) {
            return function (__copy__300) {
                return function (__copy__301) {
                    var __dict_Ord_161 = __copy___dict_Ord_161;
                    var _300 = __copy__300;
                    var _301 = __copy__301;
                    tco: while (true) {
                        if (_300.length === 0) {
                            return _301;
                        };
                        if (_300.length >= 1) {
                            var _1130 = _300.slice(1);
                            if (_300[0] instanceof TwoLeft && ((_300[0]).value2 instanceof Leaf && _301 instanceof Leaf)) {
                                return fromZipper(__dict_Ord_161)(_1130)(new Two(Leaf.value, (_300[0]).value0, (_300[0]).value1, Leaf.value));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1135 = _300.slice(1);
                            if (_300[0] instanceof TwoRight && ((_300[0]).value0 instanceof Leaf && _301 instanceof Leaf)) {
                                return fromZipper(__dict_Ord_161)(_1135)(new Two(Leaf.value, (_300[0]).value1, (_300[0]).value2, Leaf.value));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1144 = _300.slice(1);
                            if (_300[0] instanceof TwoLeft && (_300[0]).value2 instanceof Two) {
                                var __tco___dict_Ord_161 = __dict_Ord_161;
                                var __tco__301 = new Three(_301, (_300[0]).value0, (_300[0]).value1, (_300[0]).value2.value0, (_300[0]).value2.value1, (_300[0]).value2.value2, (_300[0]).value2.value3);
                                __dict_Ord_161 = __tco___dict_Ord_161;
                                _300 = _1144;
                                _301 = __tco__301;
                                continue tco;
                            };
                        };
                        if (_300.length >= 1) {
                            var _1153 = _300.slice(1);
                            if (_300[0] instanceof TwoRight && (_300[0]).value0 instanceof Two) {
                                var __tco___dict_Ord_161 = __dict_Ord_161;
                                var __tco__301 = new Three((_300[0]).value0.value0, (_300[0]).value0.value1, (_300[0]).value0.value2, (_300[0]).value0.value3, (_300[0]).value1, (_300[0]).value2, _301);
                                __dict_Ord_161 = __tco___dict_Ord_161;
                                _300 = _1153;
                                _301 = __tco__301;
                                continue tco;
                            };
                        };
                        if (_300.length >= 1) {
                            var _1165 = _300.slice(1);
                            if (_300[0] instanceof TwoLeft && (_300[0]).value2 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1165)(new Two(new Two(_301, (_300[0]).value0, (_300[0]).value1, (_300[0]).value2.value0), (_300[0]).value2.value1, (_300[0]).value2.value2, new Two((_300[0]).value2.value3, (_300[0]).value2.value4, (_300[0]).value2.value5, (_300[0]).value2.value6)));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1177 = _300.slice(1);
                            if (_300[0] instanceof TwoRight && (_300[0]).value0 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1177)(new Two(new Two((_300[0]).value0.value0, (_300[0]).value0.value1, (_300[0]).value0.value2, (_300[0]).value0.value3), (_300[0]).value0.value4, (_300[0]).value0.value5, new Two((_300[0]).value0.value6, (_300[0]).value1, (_300[0]).value2, _301)));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1185 = _300.slice(1);
                            if (_300[0] instanceof ThreeLeft && ((_300[0]).value2 instanceof Leaf && ((_300[0]).value5 instanceof Leaf && _301 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_161)(_1185)(new Three(Leaf.value, (_300[0]).value0, (_300[0]).value1, Leaf.value, (_300[0]).value3, (_300[0]).value4, Leaf.value));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1193 = _300.slice(1);
                            if (_300[0] instanceof ThreeMiddle && ((_300[0]).value0 instanceof Leaf && ((_300[0]).value5 instanceof Leaf && _301 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_161)(_1193)(new Three(Leaf.value, (_300[0]).value1, (_300[0]).value2, Leaf.value, (_300[0]).value3, (_300[0]).value4, Leaf.value));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1201 = _300.slice(1);
                            if (_300[0] instanceof ThreeRight && ((_300[0]).value0 instanceof Leaf && ((_300[0]).value3 instanceof Leaf && _301 instanceof Leaf))) {
                                return fromZipper(__dict_Ord_161)(_1201)(new Three(Leaf.value, (_300[0]).value1, (_300[0]).value2, Leaf.value, (_300[0]).value4, (_300[0]).value5, Leaf.value));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1213 = _300.slice(1);
                            if (_300[0] instanceof ThreeLeft && (_300[0]).value2 instanceof Two) {
                                return fromZipper(__dict_Ord_161)(_1213)(new Two(new Three(_301, (_300[0]).value0, (_300[0]).value1, (_300[0]).value2.value0, (_300[0]).value2.value1, (_300[0]).value2.value2, (_300[0]).value2.value3), (_300[0]).value3, (_300[0]).value4, (_300[0]).value5));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1225 = _300.slice(1);
                            if (_300[0] instanceof ThreeMiddle && (_300[0]).value0 instanceof Two) {
                                return fromZipper(__dict_Ord_161)(_1225)(new Two(new Three((_300[0]).value0.value0, (_300[0]).value0.value1, (_300[0]).value0.value2, (_300[0]).value0.value3, (_300[0]).value1, (_300[0]).value2, _301), (_300[0]).value3, (_300[0]).value4, (_300[0]).value5));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1237 = _300.slice(1);
                            if (_300[0] instanceof ThreeMiddle && (_300[0]).value5 instanceof Two) {
                                return fromZipper(__dict_Ord_161)(_1237)(new Two((_300[0]).value0, (_300[0]).value1, (_300[0]).value2, new Three(_301, (_300[0]).value3, (_300[0]).value4, (_300[0]).value5.value0, (_300[0]).value5.value1, (_300[0]).value5.value2, (_300[0]).value5.value3)));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1249 = _300.slice(1);
                            if (_300[0] instanceof ThreeRight && (_300[0]).value3 instanceof Two) {
                                return fromZipper(__dict_Ord_161)(_1249)(new Two((_300[0]).value0, (_300[0]).value1, (_300[0]).value2, new Three((_300[0]).value3.value0, (_300[0]).value3.value1, (_300[0]).value3.value2, (_300[0]).value3.value3, (_300[0]).value4, (_300[0]).value5, _301)));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1264 = _300.slice(1);
                            if (_300[0] instanceof ThreeLeft && (_300[0]).value2 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1264)(new Three(new Two(_301, (_300[0]).value0, (_300[0]).value1, (_300[0]).value2.value0), (_300[0]).value2.value1, (_300[0]).value2.value2, new Two((_300[0]).value2.value3, (_300[0]).value2.value4, (_300[0]).value2.value5, (_300[0]).value2.value6), (_300[0]).value3, (_300[0]).value4, (_300[0]).value5));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1279 = _300.slice(1);
                            if (_300[0] instanceof ThreeMiddle && (_300[0]).value0 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1279)(new Three(new Two((_300[0]).value0.value0, (_300[0]).value0.value1, (_300[0]).value0.value2, (_300[0]).value0.value3), (_300[0]).value0.value4, (_300[0]).value0.value5, new Two((_300[0]).value0.value6, (_300[0]).value1, (_300[0]).value2, _301), (_300[0]).value3, (_300[0]).value4, (_300[0]).value5));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1294 = _300.slice(1);
                            if (_300[0] instanceof ThreeMiddle && (_300[0]).value5 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1294)(new Three((_300[0]).value0, (_300[0]).value1, (_300[0]).value2, new Two(_301, (_300[0]).value3, (_300[0]).value4, (_300[0]).value5.value0), (_300[0]).value5.value1, (_300[0]).value5.value2, new Two((_300[0]).value5.value3, (_300[0]).value5.value4, (_300[0]).value5.value5, (_300[0]).value5.value6)));
                            };
                        };
                        if (_300.length >= 1) {
                            var _1309 = _300.slice(1);
                            if (_300[0] instanceof ThreeRight && (_300[0]).value3 instanceof Three) {
                                return fromZipper(__dict_Ord_161)(_1309)(new Three((_300[0]).value0, (_300[0]).value1, (_300[0]).value2, new Two((_300[0]).value3.value0, (_300[0]).value3.value1, (_300[0]).value3.value2, (_300[0]).value3.value3), (_300[0]).value3.value4, (_300[0]).value3.value5, new Two((_300[0]).value3.value6, (_300[0]).value4, (_300[0]).value5, _301)));
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var removeMaxNode = function (__copy___dict_Ord_162) {
            return function (__copy__303) {
                return function (__copy__304) {
                    var __dict_Ord_162 = __copy___dict_Ord_162;
                    var _303 = __copy__303;
                    var _304 = __copy__304;
                    tco: while (true) {
                        if (_304 instanceof Two && (_304.value0 instanceof Leaf && _304.value3 instanceof Leaf)) {
                            return up(__dict_Ord_162)(_303)(Leaf.value);
                        };
                        if (_304 instanceof Two) {
                            var __tco___dict_Ord_162 = __dict_Ord_162;
                            var __tco__303 = Prelude[":"](new TwoRight(_304.value0, _304.value1, _304.value2))(_303);
                            var __tco__304 = _304.value3;
                            __dict_Ord_162 = __tco___dict_Ord_162;
                            _303 = __tco__303;
                            _304 = __tco__304;
                            continue tco;
                        };
                        if (_304 instanceof Three && (_304.value0 instanceof Leaf && (_304.value3 instanceof Leaf && _304.value6 instanceof Leaf))) {
                            return up(__dict_Ord_162)(Prelude[":"](new TwoRight(Leaf.value, _304.value1, _304.value2))(_303))(Leaf.value);
                        };
                        if (_304 instanceof Three) {
                            var __tco___dict_Ord_162 = __dict_Ord_162;
                            var __tco__303 = Prelude[":"](new ThreeRight(_304.value0, _304.value1, _304.value2, _304.value3, _304.value4, _304.value5))(_303);
                            var __tco__304 = _304.value6;
                            __dict_Ord_162 = __tco___dict_Ord_162;
                            _303 = __tco__303;
                            _304 = __tco__304;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var maxNode = function (__copy___dict_Ord_163) {
            return function (__copy__302) {
                var __dict_Ord_163 = __copy___dict_Ord_163;
                var _302 = __copy__302;
                tco: while (true) {
                    if (_302 instanceof Two && _302.value3 instanceof Leaf) {
                        return {
                            key: _302.value1, 
                            value: _302.value2
                        };
                    };
                    if (_302 instanceof Two) {
                        var __tco___dict_Ord_163 = __dict_Ord_163;
                        var __tco__302 = _302.value3;
                        __dict_Ord_163 = __tco___dict_Ord_163;
                        _302 = __tco__302;
                        continue tco;
                    };
                    if (_302 instanceof Three && _302.value6 instanceof Leaf) {
                        return {
                            key: _302.value4, 
                            value: _302.value5
                        };
                    };
                    if (_302 instanceof Three) {
                        var __tco___dict_Ord_163 = __dict_Ord_163;
                        var __tco__302 = _302.value6;
                        __dict_Ord_163 = __tco___dict_Ord_163;
                        _302 = __tco__302;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
        var down = function (__copy___dict_Ord_164) {
            return function (__copy__297) {
                return function (__copy__298) {
                    return function (__copy__299) {
                        var __dict_Ord_164 = __copy___dict_Ord_164;
                        var _297 = __copy__297;
                        var _298 = __copy__298;
                        var _299 = __copy__299;
                        tco: while (true) {
                            if (_299 instanceof Leaf) {
                                return fromZipper(__dict_Ord_164)(_297)(Leaf.value);
                            };
                            if (_299 instanceof Two && (_299.value0 instanceof Leaf && (_299.value3 instanceof Leaf && Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value1)))) {
                                return up(__dict_Ord_164)(_297)(Leaf.value);
                            };
                            if (_299 instanceof Two) {
                                if (Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value1)) {
                                    var max = maxNode(__dict_Ord_164)(_299.value0);
                                    return removeMaxNode(__dict_Ord_164)(Prelude[":"](new TwoLeft(max.key, max.value, _299.value3))(_297))(_299.value0);
                                };
                                if (Prelude["<"](__dict_Ord_164)(_298)(_299.value1)) {
                                    var __tco___dict_Ord_164 = __dict_Ord_164;
                                    var __tco__297 = Prelude[":"](new TwoLeft(_299.value1, _299.value2, _299.value3))(_297);
                                    var __tco__298 = _298;
                                    var __tco__299 = _299.value0;
                                    __dict_Ord_164 = __tco___dict_Ord_164;
                                    _297 = __tco__297;
                                    _298 = __tco__298;
                                    _299 = __tco__299;
                                    continue tco;
                                };
                                if (Prelude.otherwise) {
                                    var __tco___dict_Ord_164 = __dict_Ord_164;
                                    var __tco__297 = Prelude[":"](new TwoRight(_299.value0, _299.value1, _299.value2))(_297);
                                    var __tco__298 = _298;
                                    var __tco__299 = _299.value3;
                                    __dict_Ord_164 = __tco___dict_Ord_164;
                                    _297 = __tco__297;
                                    _298 = __tco__298;
                                    _299 = __tco__299;
                                    continue tco;
                                };
                            };
                            if (_299 instanceof Three && (_299.value0 instanceof Leaf && (_299.value3 instanceof Leaf && _299.value6 instanceof Leaf))) {
                                if (Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value1)) {
                                    return fromZipper(__dict_Ord_164)(_297)(new Two(Leaf.value, _299.value4, _299.value5, Leaf.value));
                                };
                                if (Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value4)) {
                                    return fromZipper(__dict_Ord_164)(_297)(new Two(Leaf.value, _299.value1, _299.value2, Leaf.value));
                                };
                            };
                            if (_299 instanceof Three) {
                                if (Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value1)) {
                                    var max = maxNode(__dict_Ord_164)(_299.value0);
                                    return removeMaxNode(__dict_Ord_164)(Prelude[":"](new ThreeLeft(max.key, max.value, _299.value3, _299.value4, _299.value5, _299.value6))(_297))(_299.value0);
                                };
                                if (Prelude["=="](__dict_Ord_164["__superclass_Prelude.Eq_0"]())(_298)(_299.value4)) {
                                    var max = maxNode(__dict_Ord_164)(_299.value3);
                                    return removeMaxNode(__dict_Ord_164)(Prelude[":"](new ThreeMiddle(_299.value0, _299.value1, _299.value2, max.key, max.value, _299.value6))(_297))(_299.value3);
                                };
                                if (Prelude["<"](__dict_Ord_164)(_298)(_299.value1)) {
                                    var __tco___dict_Ord_164 = __dict_Ord_164;
                                    var __tco__297 = Prelude[":"](new ThreeLeft(_299.value1, _299.value2, _299.value3, _299.value4, _299.value5, _299.value6))(_297);
                                    var __tco__298 = _298;
                                    var __tco__299 = _299.value0;
                                    __dict_Ord_164 = __tco___dict_Ord_164;
                                    _297 = __tco__297;
                                    _298 = __tco__298;
                                    _299 = __tco__299;
                                    continue tco;
                                };
                                if (Prelude["<"](__dict_Ord_164)(_299.value1)(_298) && Prelude["<"](__dict_Ord_164)(_298)(_299.value4)) {
                                    var __tco___dict_Ord_164 = __dict_Ord_164;
                                    var __tco__297 = Prelude[":"](new ThreeMiddle(_299.value0, _299.value1, _299.value2, _299.value4, _299.value5, _299.value6))(_297);
                                    var __tco__298 = _298;
                                    var __tco__299 = _299.value3;
                                    __dict_Ord_164 = __tco___dict_Ord_164;
                                    _297 = __tco__297;
                                    _298 = __tco__298;
                                    _299 = __tco__299;
                                    continue tco;
                                };
                                if (Prelude.otherwise) {
                                    var __tco___dict_Ord_164 = __dict_Ord_164;
                                    var __tco__297 = Prelude[":"](new ThreeRight(_299.value0, _299.value1, _299.value2, _299.value3, _299.value4, _299.value5))(_297);
                                    var __tco__298 = _298;
                                    var __tco__299 = _299.value6;
                                    __dict_Ord_164 = __tco___dict_Ord_164;
                                    _297 = __tco__297;
                                    _298 = __tco__298;
                                    _299 = __tco__299;
                                    continue tco;
                                };
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_160)([  ]);
    };
    var checkValid = function (tree) {
        var allHeights = function (_290) {
            if (_290 instanceof Leaf) {
                return [ 0 ];
            };
            if (_290 instanceof Two) {
                return Data_Array.map(function (n) {
                    return n + 1;
                })(Prelude["++"](Data_Array.semigroupArray)(allHeights(_290.value0))(allHeights(_290.value3)));
            };
            if (_290 instanceof Three) {
                return Data_Array.map(function (n) {
                    return n + 1;
                })(Prelude["++"](Data_Array.semigroupArray)(allHeights(_290.value0))(Prelude["++"](Data_Array.semigroupArray)(allHeights(_290.value3))(allHeights(_290.value6))));
            };
            throw new Error("Failed pattern match");
        };
        return Data_Array.length(Data_Array.nub(Prelude.eqNumber)(allHeights(tree))) === 1;
    };
    var alter = function (__dict_Ord_165) {
        return function (f) {
            return function (k) {
                return function (m) {
                    var _1394 = f(lookup(__dict_Ord_165)(k)(m));
                    if (_1394 instanceof Data_Maybe.Nothing) {
                        return $$delete(__dict_Ord_165)(k)(m);
                    };
                    if (_1394 instanceof Data_Maybe.Just) {
                        return insert(__dict_Ord_165)(k)(_1394.value0)(m);
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var update = function (__dict_Ord_166) {
        return function (f) {
            return function (k) {
                return function (m) {
                    return alter(__dict_Ord_166)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
                };
            };
        };
    };
    return {
        alter: alter, 
        checkValid: checkValid, 
        "delete": $$delete, 
        empty: empty, 
        eqMap: eqMap, 
        foldableMap: foldableMap, 
        fromList: fromList, 
        functorMap: functorMap, 
        insert: insert, 
        isEmpty: isEmpty, 
        keys: keys, 
        lookup: lookup, 
        map: map, 
        member: member, 
        showMap: showMap, 
        showTree: showTree, 
        singleton: singleton, 
        toList: toList, 
        traversableMap: traversableMap, 
        union: union, 
        unions: unions, 
        update: update, 
        values: values
    };
})();
var PS = PS || {};
PS.Data_Set = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Map = PS.Data_Map;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Foldable = PS.Data_Foldable;
    function Set(value0) {
        this.value0 = value0;
    };
    Set.create = function (value0) {
        return new Set(value0);
    };
    var union = function (__dict_Ord_167) {
        return function (_314) {
            return function (_315) {
                return new Set(Data_Map.union(__dict_Ord_167)(_314.value0)(_315.value0));
            };
        };
    };
    var toList = function (_313) {
        return Data_Array.map(Data_Tuple.fst)(Data_Map.toList(_313.value0));
    };
    var singleton = function (a) {
        return new Set(Data_Map.singleton(a)(Prelude.unit));
    };
    var showSet = function (__dict_Show_168) {
        return new Prelude.Show(function (s) {
            return "fromList " + Prelude.show(Prelude.showArray(__dict_Show_168))(toList(s));
        });
    };
    var member = function (__dict_Ord_169) {
        return function (_307) {
            return function (_308) {
                return Data_Map.member(__dict_Ord_169)(_307)(_308.value0);
            };
        };
    };
    var isEmpty = function (_305) {
        return Data_Map.isEmpty(_305.value0);
    };
    var insert = function (__dict_Ord_170) {
        return function (_309) {
            return function (_310) {
                return new Set(Data_Map.insert(__dict_Ord_170)(_309)(Prelude.unit)(_310.value0));
            };
        };
    };
    var eqSet = function (__dict_Eq_171) {
        return new Prelude.Eq(function (_318) {
            return function (_319) {
                return Prelude["/="](Data_Map.eqMap(__dict_Eq_171)(Prelude.eqUnit))(_318.value0)(_319.value0);
            };
        }, function (_316) {
            return function (_317) {
                return Prelude["=="](Data_Map.eqMap(__dict_Eq_171)(Prelude.eqUnit))(_316.value0)(_317.value0);
            };
        });
    };
    var empty = new Set(Data_Map.empty);
    var fromList = function (__dict_Ord_172) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (a) {
                return insert(__dict_Ord_172)(a)(m);
            };
        })(empty);
    };
    var unions = function (__dict_Ord_173) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(union(__dict_Ord_173))(empty);
    };
    var $$delete = function (__dict_Ord_174) {
        return function (_311) {
            return function (_312) {
                return new Set(Data_Map["delete"](__dict_Ord_174)(_311)(_312.value0));
            };
        };
    };
    var checkValid = function (_306) {
        return Data_Map.checkValid(_306.value0);
    };
    return {
        checkValid: checkValid, 
        "delete": $$delete, 
        empty: empty, 
        eqSet: eqSet, 
        fromList: fromList, 
        insert: insert, 
        isEmpty: isEmpty, 
        member: member, 
        showSet: showSet, 
        singleton: singleton, 
        toList: toList, 
        union: union, 
        unions: unions
    };
})();
var PS = PS || {};
PS.Data_Graph = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Map = PS.Data_Map;
    var Control_Monad = PS.Control_Monad;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Math = PS.Math;
    function AcyclicSCC(value0) {
        this.value0 = value0;
    };
    AcyclicSCC.create = function (value0) {
        return new AcyclicSCC(value0);
    };
    function CyclicSCC(value0) {
        this.value0 = value0;
    };
    CyclicSCC.create = function (value0) {
        return new CyclicSCC(value0);
    };
    function Edge(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Edge.create = function (value0) {
        return function (value1) {
            return new Edge(value0, value1);
        };
    };
    function Graph(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Graph.create = function (value0) {
        return function (value1) {
            return new Graph(value0, value1);
        };
    };
    var vertices = function (_322) {
        if (_322 instanceof AcyclicSCC) {
            return [ _322.value0 ];
        };
        if (_322 instanceof CyclicSCC) {
            return _322.value0;
        };
        throw new Error("Failed pattern match");
    };
    var showSCC = function (__dict_Show_175) {
        return new Prelude.Show(function (_332) {
            if (_332 instanceof AcyclicSCC) {
                return "AcyclicSCC (" + (Prelude.show(__dict_Show_175)(_332.value0) + ")");
            };
            if (_332 instanceof CyclicSCC) {
                return "CyclicSCC " + Prelude.show(Prelude.showArray(__dict_Show_175))(_332.value0);
            };
            throw new Error("Failed pattern match");
        });
    };
    var popUntil = function (__copy___dict_Eq_176) {
        return function (__copy__326) {
            return function (__copy__327) {
                return function (__copy__328) {
                    return function (__copy__329) {
                        var __dict_Eq_176 = __copy___dict_Eq_176;
                        var _326 = __copy__326;
                        var _327 = __copy__327;
                        var _328 = __copy__328;
                        var _329 = __copy__329;
                        tco: while (true) {
                            if (_328.length === 0) {
                                return {
                                    path: [  ], 
                                    component: _329
                                };
                            };
                            if (_328.length >= 1) {
                                var _1434 = _328.slice(1);
                                if (Prelude["=="](__dict_Eq_176)(_326(_327))(_326(_328[0]))) {
                                    return {
                                        path: _1434, 
                                        component: Prelude[":"](_328[0])(_329)
                                    };
                                };
                            };
                            if (_328.length >= 1) {
                                var _1436 = _328.slice(1);
                                var __tco___dict_Eq_176 = __dict_Eq_176;
                                var __tco__326 = _326;
                                var __tco__327 = _327;
                                var __tco__329 = Prelude[":"](_328[0])(_329);
                                __dict_Eq_176 = __tco___dict_Eq_176;
                                _326 = __tco__326;
                                _327 = __tco__327;
                                _328 = _1436;
                                _329 = __tco__329;
                                continue tco;
                            };
                            throw new Error("Failed pattern match");
                        };
                    };
                };
            };
        };
    };
    var maybeMin = function (_330) {
        return function (_331) {
            if (_331 instanceof Data_Maybe.Nothing) {
                return new Data_Maybe.Just(_330);
            };
            if (_331 instanceof Data_Maybe.Just) {
                return Data_Maybe.Just.create(Math.min(_330)(_331.value0));
            };
            throw new Error("Failed pattern match");
        };
    };
    var scc$prime = function (__dict_Eq_177) {
        return function (__dict_Ord_178) {
            return function (_323) {
                return function (_324) {
                    return function (_325) {
                        return Control_Monad_Eff.runPure(function __do() {
                            var _20 = {
                                value: 0
                            };
                            var _19 = {
                                value: [  ]
                            };
                            var _18 = {
                                value: Data_Map.empty
                            };
                            var _17 = {
                                value: Data_Map.empty
                            };
                            var _16 = {
                                value: [  ]
                            };
                            return (function () {
                                var lowlinkOfKey = function (k) {
                                    return function __do() {
                                        return Data_Map.lookup(__dict_Ord_178)(k)(_17.value);
                                    };
                                };
                                var lowlinkOf = function (v) {
                                    return lowlinkOfKey(_323(v));
                                };
                                var isCycle = function (k) {
                                    return Data_Foldable.any(Data_Foldable.foldableArray)(function (_321) {
                                        return Prelude["=="](__dict_Eq_177)(_321.value0)(k) && Prelude["=="](__dict_Eq_177)(_321.value1)(k);
                                    })(_325.value1);
                                };
                                var makeComponent = function (_336) {
                                    if (_336.length === 1 && !isCycle(_323(_336[0]))) {
                                        return new AcyclicSCC(_336[0]);
                                    };
                                    return new CyclicSCC(_336);
                                };
                                var indexOfKey = function (k) {
                                    return function __do() {
                                        return Data_Map.lookup(__dict_Ord_178)(k)(_18.value);
                                    };
                                };
                                var strongConnect = function (k) {
                                    var v = _324(k);
                                    return function __do() {
                                        var _15 = _20.value;
                                        _18.value = Data_Map.insert(__dict_Ord_178)(k)(_15)(_18.value);
                                        _17.value = Data_Map.insert(__dict_Ord_178)(k)(_15)(_17.value);
                                        _20.value = _15 + 1;
                                        _19.value = Prelude[":"](v)(_19.value);
                                        Data_Traversable["for"](Control_Monad_Eff.applicativeEff)(Data_Traversable.traversableArray)(_325.value1)(function (_320) {
                                            return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](__dict_Eq_177)(k)(_320.value0))(function __do() {
                                                var _11 = indexOfKey(_320.value1)();
                                                return (function () {
                                                    if (_11 instanceof Data_Maybe.Nothing) {
                                                        var w = _324(_320.value1);
                                                        return function __do() {
                                                            strongConnect(_320.value1)();
                                                            var _8 = lowlinkOfKey(_320.value1)();
                                                            return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_8)(function (lowlink) {
                                                                return Control_Monad_ST.modifySTRef(_17)(Data_Map.alter(__dict_Ord_178)(maybeMin(lowlink))(k));
                                                            })();
                                                        };
                                                    };
                                                    return Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Foldable.elem(__dict_Eq_177)(Data_Foldable.foldableArray)(_320.value1)(Data_Array.map(_323)(_19.value)))(function __do() {
                                                        var _9 = indexOfKey(_320.value1)();
                                                        return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(_9)(function (index_1) {
                                                            return Control_Monad_ST.modifySTRef(_17)(Data_Map.alter(__dict_Ord_178)(maybeMin(index_1))(k));
                                                        })();
                                                    });
                                                })()();
                                            });
                                        })();
                                        var _14 = indexOfKey(k)();
                                        var _13 = lowlinkOfKey(k)();
                                        return Control_Monad.when(Control_Monad_Eff.monadEff)(Prelude["=="](Data_Maybe.eqMaybe(Prelude.eqNumber))(_14)(_13))(function __do() {
                                            var _12 = _19.value;
                                            return (function () {
                                                var newPath = popUntil(__dict_Eq_177)(_323)(v)(_12)([  ]);
                                                return function __do() {
                                                    _16.value = Prelude.flip(Prelude["++"](Data_Array.semigroupArray))([ makeComponent(newPath.component) ])(_16.value);
                                                    _19.value = newPath.path;
                                                    return Prelude.unit;
                                                };
                                            })()();
                                        })();
                                    };
                                };
                                var indexOf = function (v) {
                                    return indexOfKey(_323(v));
                                };
                                var go = function (_335) {
                                    if (_335.length === 0) {
                                        return Control_Monad_ST.readSTRef(_16);
                                    };
                                    if (_335.length >= 1) {
                                        var _1470 = _335.slice(1);
                                        return function __do() {
                                            var _7 = indexOf(_335[0])();
                                            Control_Monad.when(Control_Monad_Eff.monadEff)(Data_Maybe.isNothing(_7))(strongConnect(_323(_335[0])))();
                                            return go(_1470)();
                                        };
                                    };
                                    throw new Error("Failed pattern match");
                                };
                                return go(_325.value0);
                            })()();
                        });
                    };
                };
            };
        };
    };
    var scc = function (__dict_Eq_179) {
        return function (__dict_Ord_180) {
            return scc$prime(__dict_Eq_179)(__dict_Ord_180)(Prelude.id(Prelude.categoryArr))(Prelude.id(Prelude.categoryArr));
        };
    };
    var topSort$prime = function (__dict_Eq_181) {
        return function (__dict_Ord_182) {
            return function (makeKey) {
                return function (makeVert) {
                    return Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.reverse)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Array.concatMap(vertices))(scc$prime(__dict_Eq_181)(__dict_Ord_182)(makeKey)(makeVert)));
                };
            };
        };
    };
    var topSort = function (__dict_Eq_183) {
        return function (__dict_Ord_184) {
            return topSort$prime(__dict_Eq_183)(__dict_Ord_184)(Prelude.id(Prelude.categoryArr))(Prelude.id(Prelude.categoryArr));
        };
    };
    var eqSCC = function (__dict_Eq_185) {
        return new Prelude.Eq(function (scc1) {
            return function (scc2) {
                return !Prelude["=="](eqSCC(__dict_Eq_185))(scc1)(scc2);
            };
        }, function (_333) {
            return function (_334) {
                if (_333 instanceof AcyclicSCC && _334 instanceof AcyclicSCC) {
                    return Prelude["=="](__dict_Eq_185)(_333.value0)(_334.value0);
                };
                if (_333 instanceof CyclicSCC && _334 instanceof CyclicSCC) {
                    return Prelude["=="](Prelude.eqArray(__dict_Eq_185))(_333.value0)(_334.value0);
                };
                return false;
            };
        });
    };
    return {
        AcyclicSCC: AcyclicSCC, 
        CyclicSCC: CyclicSCC, 
        Edge: Edge, 
        Graph: Graph, 
        eqSCC: eqSCC, 
        scc: scc, 
        "scc'": scc$prime, 
        showSCC: showSCC, 
        topSort: topSort, 
        "topSort'": topSort$prime, 
        vertices: vertices
    };
})();
var PS = PS || {};
PS.Data_StrMap = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Monoid = PS.Data_Monoid;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_StrMap_ST = PS.Data_StrMap_ST;
    var Data_Array = PS.Data_Array;
    
  function _copy(m) {
    var r = {};
    for (var k in m) {
      r[k] = m[k];
    }
    return r;
  }
  ;
    
  function _copyEff(m) {
    return function() {
      var r = {};
      for (var k in m) {
        r[k] = m[k];
      }
      return r;
    };
  }
  ;
    
  function runST(f) {
    return f;
  }
  ;
    
  function _fmapStrMap(m0, f) {
    var m = {};
    for (var k in m0) {
      m[k] = f(m0[k]);
    }
    return m;
  }
  ;
    
  function _foldM(bind) {
    return function(f) {
      return function(mz) {
        return function(m) {
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            mz = bind(mz)(g(k));
          }
          return mz;
        };
      };
    };
  }
  ;
    
  function _foldSCStrMap(m, z, f, fromMaybe) {
    for (var k in m) {
      var maybeR = f(z)(k)(m[k]);
      var r = fromMaybe(null)(maybeR);
      if (r === null) return z;
      else z = r;
    }
    return z;
  }
  ;
    
  function all(f) {
    return function(m) {
      for (var k in m) {
        if (!f(k)(m[k])) return false;
      }
      return true;
    };
  }
  ;
    var empty = {};;
    
  function size(m) {
    var s = 0;
    for (var k in m) {
      ++s;
    }
    return s;
  }
  ;
    
  function _lookup(no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  }
  ;
    
  function _unsafeDeleteStrMap(m, k) {
     delete m[k];
     return m;
  }
  ;
    
  function _collect(f) {
    return function(m) {
      var r = [];
      for (var k in m) {
        r.push(f(k)(m[k]));
      }
      return r;
    };
  }
  ;
    
  var keys = Object.keys || _collect(function(k) {
    return function() { return k; };
  });
  ;
    var values = _collect(function (_) {
        return function (v) {
            return v;
        };
    });
    var toList = _collect(Data_Tuple.Tuple.create);
    var thawST = _copyEff;
    var showStrMap = function (__dict_Show_186) {
        return new Prelude.Show(function (m) {
            return "fromList " + Prelude.show(Prelude.showArray(Data_Tuple.showTuple(Prelude.showString)(__dict_Show_186)))(toList(m));
        });
    };
    var pureST = function (f) {
        return Control_Monad_Eff.runPure(runST(f));
    };
    var singleton = function (k) {
        return function (v) {
            return pureST(function __do() {
                var _22 = Data_StrMap_ST["new"]();
                Data_StrMap_ST.poke(_22)(k)(v)();
                return _22;
            });
        };
    };
    var mutate = function (f) {
        return function (m) {
            return pureST(function __do() {
                var _21 = thawST(m)();
                f(_21)();
                return _21;
            });
        };
    };
    var member = Data_Function.runFn4(_lookup)(false)(Prelude["const"](true));
    var lookup = Data_Function.runFn4(_lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
    var isSubmap = function (__dict_Eq_187) {
        return function (m1) {
            return function (m2) {
                var f = function (k) {
                    return function (v) {
                        return _lookup(false, Prelude["=="](__dict_Eq_187)(v), k, m2);
                    };
                };
                return all(f)(m1);
            };
        };
    };
    var isEmpty = all(function (_) {
        return function (__1) {
            return false;
        };
    });
    var insert = function (k) {
        return function (v) {
            return mutate(function (s) {
                return Data_StrMap_ST.poke(s)(k)(v);
            });
        };
    };
    var functorStrMap = new Prelude.Functor(function (f) {
        return function (m) {
            return _fmapStrMap(m, f);
        };
    });
    var map = Prelude["<$>"](functorStrMap);
    var fromList = function (l) {
        return pureST(function __do() {
            var _23 = Data_StrMap_ST["new"]();
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(l)(function (_337) {
                return Data_StrMap_ST.poke(_23)(_337.value0)(_337.value1);
            })();
            return _23;
        });
    };
    var freezeST = _copyEff;
    var foldMaybe = function (f) {
        return function (z) {
            return function (m) {
                return _foldSCStrMap(m, z, f, Data_Maybe.fromMaybe);
            };
        };
    };
    var foldM = function (__dict_Monad_188) {
        return function (f) {
            return function (z) {
                return _foldM(Prelude[">>="](__dict_Monad_188["__superclass_Prelude.Bind_1"]()))(f)(Prelude.pure(__dict_Monad_188["__superclass_Prelude.Applicative_0"]())(z));
            };
        };
    };
    var semigroupStrMap = function (__dict_Semigroup_189) {
        return new Prelude.Semigroup(function (m1) {
            return function (m2) {
                return mutate(function (s) {
                    return foldM(Control_Monad_Eff.monadEff)(function (s_1) {
                        return function (k) {
                            return function (v2) {
                                return Data_StrMap_ST.poke(s_1)(k)(_lookup(v2, function (v1) {
                                    return Prelude["<>"](__dict_Semigroup_189)(v1)(v2);
                                }, k, m2));
                            };
                        };
                    })(s)(m1);
                })(m2);
            };
        });
    };
    var union = function (m) {
        return mutate(function (s) {
            return foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m);
        });
    };
    var unions = Data_Foldable.foldl(Data_Foldable.foldableArray)(union)(empty);
    var fold = _foldM(Prelude["#"]);
    var foldMap = function (__dict_Monoid_192) {
        return function (f) {
            return fold(function (acc) {
                return function (k) {
                    return function (v) {
                        return Prelude["<>"](__dict_Monoid_192["__superclass_Prelude.Semigroup_0"]())(acc)(f(k)(v));
                    };
                };
            })(Data_Monoid.mempty(__dict_Monoid_192));
        };
    };
    var foldableStrMap = new Data_Foldable.Foldable(function (__dict_Monoid_193) {
        return function (f) {
            return foldMap(__dict_Monoid_193)(Prelude["const"](f));
        };
    }, function (f) {
        return fold(function (z) {
            return function (_) {
                return f(z);
            };
        });
    }, function (f) {
        return function (z) {
            return function (m) {
                return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
            };
        };
    });
    var traversableStrMap = new Data_Traversable.Traversable(function () {
        return foldableStrMap;
    }, function () {
        return functorStrMap;
    }, function (__dict_Applicative_191) {
        return Data_Traversable.traverse(traversableStrMap)(__dict_Applicative_191)(Prelude.id(Prelude.categoryArr));
    }, function (__dict_Applicative_190) {
        return function (f) {
            return function (ms) {
                return Data_Foldable.foldr(Data_Foldable.foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<*>"](__dict_Applicative_190["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_190["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union)(x))(acc);
                    };
                })(Prelude.pure(__dict_Applicative_190)(empty))(Prelude["<$>"](Data_Array.functorArray)(Prelude["<$>"]((__dict_Applicative_190["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_Array.functorArray)(Data_Traversable.traverse(Data_Traversable.traversableTuple)(__dict_Applicative_190)(f))(toList(ms))));
            };
        };
    });
    var eqStrMap = function (__dict_Eq_194) {
        return new Prelude.Eq(function (m1) {
            return function (m2) {
                return !Prelude["=="](eqStrMap(__dict_Eq_194))(m1)(m2);
            };
        }, function (m1) {
            return function (m2) {
                return isSubmap(__dict_Eq_194)(m1)(m2) && isSubmap(__dict_Eq_194)(m2)(m1);
            };
        });
    };
    var $$delete = function (k) {
        return mutate(function (s) {
            return Data_StrMap_ST["delete"](s)(k);
        });
    };
    var alter = function (f) {
        return function (k) {
            return function (m) {
                var _1485 = f(lookup(k)(m));
                if (_1485 instanceof Data_Maybe.Nothing) {
                    return $$delete(k)(m);
                };
                if (_1485 instanceof Data_Maybe.Just) {
                    return insert(k)(_1485.value0)(m);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var update = function (f) {
        return function (k) {
            return function (m) {
                return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
    return {
        all: all, 
        alter: alter, 
        "delete": $$delete, 
        empty: empty, 
        eqStrMap: eqStrMap, 
        fold: fold, 
        foldM: foldM, 
        foldMap: foldMap, 
        foldMaybe: foldMaybe, 
        foldableStrMap: foldableStrMap, 
        freezeST: freezeST, 
        fromList: fromList, 
        functorStrMap: functorStrMap, 
        insert: insert, 
        isEmpty: isEmpty, 
        isSubmap: isSubmap, 
        keys: keys, 
        lookup: lookup, 
        map: map, 
        member: member, 
        runST: runST, 
        semigroupStrMap: semigroupStrMap, 
        showStrMap: showStrMap, 
        singleton: singleton, 
        size: size, 
        thawST: thawST, 
        toList: toList, 
        traversableStrMap: traversableStrMap, 
        union: union, 
        unions: unions, 
        update: update, 
        values: values
    };
})();
var PS = PS || {};
PS.Data_StrMap_ST_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function unsafeGet(m) {
    return function() {
      return m;
    }
  }
  ;
    return {
        unsafeGet: unsafeGet
    };
})();
var PS = PS || {};
PS.Data_StrMap_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function unsafeIndex(m) {
    return function(k) {
      return m[k];
    };
  }
  ;
    return {
        unsafeIndex: unsafeIndex
    };
})();
var PS = PS || {};
PS.Mazes = (function () {
    "use strict";
    var Data_Map = PS.Data_Map;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Prelude = PS.Prelude;
    var Control_Monad_Eff_Random = PS.Control_Monad_Eff_Random;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Tuple = PS.Data_Tuple;
    function Hole() {

    };
    Hole.value = new Hole();
    function E(value0) {
        this.value0 = value0;
    };
    E.create = function (value0) {
        return new E(value0);
    };
    function Node(value0) {
        this.value0 = value0;
    };
    Node.create = function (value0) {
        return new Node(value0);
    };
    function C(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    C.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new C(value0, value1, value2);
            };
        };
    };
    function Decomp(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Decomp.create = function (value0) {
        return function (value1) {
            return new Decomp(value0, value1);
        };
    };
    var shuffle = function (a) {
        var go = function (_363) {
            return function (_364) {
                if (_363 === 0) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(_364);
                };
                return function __do() {
                    var _25 = Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude["*"](Prelude.numNumber)(_363))(Control_Monad_Eff_Random.random)();
                    return (function () {
                        var n$prime = _363 - 1;
                        var x = Data_Maybe_Unsafe.fromJust(Data_Array["!!"](_364)(n$prime));
                        var y = Data_Maybe_Unsafe.fromJust(Data_Array["!!"](_364)(_25));
                        return go(n$prime)(Data_Array.updateAt(n$prime)(y)(Data_Array.updateAt(_363)(x)(_364)));
                    })()();
                };
            };
        };
        return go(Data_Array.length(a))(a);
    };
    var neighbors = function (_340) {
        return function (_341) {
            var lookup = function (_354) {
                return function (_355) {
                    return Data_Map.lookup(Prelude.ordNumber)(_355.value0.to)(_354);
                };
            };
            return Data_Array.mapMaybe(lookup(_341))(Prelude["<>"](Data_Array.semigroupArray)(_340.value2)(_340.value0));
        };
    };
    var neighborEdges = function (_342) {
        return function (_343) {
            var lookup = function (_356) {
                return function (_357) {
                    return Data_Map.lookup(Prelude.ordNumber)(_357.value0.to)(_356);
                };
            };
            return Data_Array.filter(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.isJust)(lookup(_343)))(Prelude["<>"](Data_Array.semigroupArray)(_342.value2)(_342.value0));
        };
    };
    var match = function (number) {
        return function (g) {
            var context = function (n) {
                return function (edges) {
                    return new C(Data_Array.filter(function (_338) {
                        return _338.value0.to === number;
                    })(edges), n, Data_Array.filter(function (_339) {
                        return _339.value0.from === number;
                    })(edges));
                };
            };
            var _1510 = Data_Map.lookup(Prelude.ordNumber)(number)(g);
            if (_1510 instanceof Data_Maybe.Just) {
                return new Data_Tuple.Tuple(Data_Maybe.Just.create(context(_1510.value0)(_1510.value0.value0.edges)), Data_Map["delete"](Prelude.ordNumber)(number)(g));
            };
            if (_1510 instanceof Data_Maybe.Nothing) {
                return new Data_Tuple.Tuple(Data_Maybe.Nothing.value, g);
            };
            throw new Error("Failed pattern match");
        };
    };
    var main = function __do() {
        Debug_Trace.print(Prelude.showString)("Hello, world!")();
        return Prelude[">>="](Control_Monad_Eff.bindEff)(Control_Monad_Eff_Random.random)(Prelude["<<<"](Prelude.semigroupoidArr)(Debug_Trace.print(Prelude.showString))(Prelude["<<<"](Prelude.semigroupoidArr)(Prelude["++"](Prelude.semigroupString)("Random!! "))(Prelude.show(Prelude.showNumber))))();
    };
    var liftMaybe = function (_344) {
        if (_344.value0 instanceof Data_Maybe.Just) {
            return Data_Maybe.Just.create(new Decomp(_344.value0.value0, _344.value1));
        };
        if (_344.value0 instanceof Data_Maybe.Nothing) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
    var matchAny = function (_345) {
        if (Data_Map.isEmpty(_345)) {
            return Data_Maybe.Nothing.value;
        };
        var _1520 = Data_Map.keys(_345);
        if (_1520.length >= 1) {
            var _1522 = _1520.slice(1);
            return liftMaybe(match(_1520[0])(_345));
        };
        if (_1520.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
    var insertNode = function (_346) {
        return function (_347) {
            return Data_Map.insert(Prelude.ordNumber)(_346.value0.number)(_346)(_347);
        };
    };
    var insertContext = function (_348) {
        return function (_349) {
            return insertNode(_348.value1)(_349);
        };
    };
    var gmap = function (_350) {
        return function (_351) {
            if (Data_Map.isEmpty(_351)) {
                return Data_Map.empty;
            };
            var _1533 = matchAny(_351);
            if (_1533 instanceof Data_Maybe.Just) {
                return insertContext(new C(_1533.value0.value0.value0, Node.create((function () {
                    var _1534 = {};
                    for (var _1535 in _1533.value0.value0.value1.value0) {
                        if (_1533.value0.value0.value1.value0.hasOwnProperty(_1535)) {
                            _1534[_1535] = _1533.value0.value0.value1.value0[_1535];
                        };
                    };
                    _1534.label = _350(_1533.value0.value0.value1.value0.label);
                    return _1534;
                })()), _1533.value0.value0.value2))(gmap(_350)(_1533.value0.value1));
            };
            if (_1533 instanceof Data_Maybe.Nothing) {
                return Data_Map.empty;
            };
            throw new Error("Failed pattern match");
        };
    };
    var ghead = function (g) {
        var getNode = function (_358) {
            return _358.value0.value1;
        };
        return Prelude["<$>"](Data_Maybe.functorMaybe)(getNode)(matchAny(g));
    };
    var edfs = function (_352) {
        return function (_353) {
            var go = function (_361) {
                return function (_362) {
                    if (_361.length === 0) {
                        return Prelude["return"](Control_Monad_Eff.monadEff)([  ]);
                    };
                    if (Data_Map.isEmpty(_362)) {
                        return Prelude["return"](Control_Monad_Eff.monadEff)([  ]);
                    };
                    if (_361.length >= 1) {
                        var _1562 = _361.slice(1);
                        var _1553 = match((_361[0]).value0.to)(_362);
                        if (_1553.value0 instanceof Data_Maybe.Just) {
                            return function __do() {
                                var _24 = shuffle(neighborEdges(_1553.value0.value0)(_1553.value1))();
                                return Prelude["<$>"](Control_Monad_Eff.functorEff)(Prelude[":"](_361[0]))(go(Prelude["<>"](Data_Array.semigroupArray)(_24)(_1562))(_1553.value1))();
                            };
                        };
                        if (_1553.value0 instanceof Data_Maybe.Nothing) {
                            return go(_1562)(_1553.value1);
                        };
                        throw new Error("Failed pattern match");
                    };
                    if (_361.length >= 1) {
                        var _1564 = _361.slice(1);
                        return go(_1564)(_362);
                    };
                    throw new Error("Failed pattern match");
                };
            };
            var _1565 = match(_352.value0.number)(_353);
            if (_1565.value0 instanceof Data_Maybe.Just) {
                return go(neighborEdges(_1565.value0.value0)(_1565.value1))(_1565.value1);
            };
            if (_1565.value0 instanceof Data_Maybe.Nothing) {
                return Prelude["return"](Control_Monad_Eff.monadEff)([  ]);
            };
            throw new Error("Failed pattern match");
        };
    };
    var dfs = function (start) {
        return function (g) {
            var go = function (_359) {
                return function (_360) {
                    if (_359.length === 0) {
                        return [  ];
                    };
                    if (Data_Map.isEmpty(_360)) {
                        return [  ];
                    };
                    if (_359.length >= 1) {
                        var _1582 = _359.slice(1);
                        var _1574 = match((_359[0]).value0.number)(_360);
                        if (_1574.value0 instanceof Data_Maybe.Just) {
                            return Prelude[":"](_359[0])(go(Prelude["<>"](Data_Array.semigroupArray)(neighbors(_1574.value0.value0)(_1574.value1))(_1582))(_1574.value1));
                        };
                        if (_1574.value0 instanceof Data_Maybe.Nothing) {
                            return go(_1582)(_1574.value1);
                        };
                        throw new Error("Failed pattern match");
                    };
                    if (_359.length >= 1) {
                        var _1584 = _359.slice(1);
                        return go(_1584)(_360);
                    };
                    throw new Error("Failed pattern match");
                };
            };
            return go([ start ])(g);
        };
    };
    return {
        C: C, 
        Decomp: Decomp, 
        E: E, 
        Hole: Hole, 
        Node: Node, 
        dfs: dfs, 
        edfs: edfs, 
        ghead: ghead, 
        gmap: gmap, 
        insertContext: insertContext, 
        insertNode: insertNode, 
        liftMaybe: liftMaybe, 
        main: main, 
        match: match, 
        matchAny: matchAny, 
        neighborEdges: neighborEdges, 
        neighbors: neighbors, 
        shuffle: shuffle
    };
})();
PS.Mazes.main();

